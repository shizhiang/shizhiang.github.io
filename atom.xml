<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iOS开发栈 | 高质量的iOS开发学习平台，Objective-C、Swift、SwiftUI、Xcode、Core Data等资源</title>
  
  
  <link href="http://www.iosprogrammer.tech/atom.xml" rel="self"/>
  
  <link href="http://www.iosprogrammer.tech/"/>
  <updated>2021-03-13T14:08:04.238Z</updated>
  <id>http://www.iosprogrammer.tech/</id>
  
  <author>
    <name>施治昂</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SwiftUI怎么实现UISearchBar</title>
    <link href="http://www.iosprogrammer.tech/swiftui/swiftui-searchbar/"/>
    <id>http://www.iosprogrammer.tech/swiftui/swiftui-searchbar/</id>
    <published>2021-03-13T13:33:16.000Z</published>
    <updated>2021-03-13T14:08:04.238Z</updated>
    
    <content type="html"><![CDATA[<p>SwiftUI没有提供UISearchBar，虽然我们可以通过使用TextField来自己实现SeachBar的效果，不过要想实现一个和UISearchBar同样的控件并不容易，尤其是清除按钮和搜索图标。</p><p>这里推荐直接使用UISearchBar和UIViewRepresentable协议来一个SearchBar。</p><a id="more"></a><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。</p></div><p><img src="../../images/first/swiftui-uisearchbar.png"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SearchBar</span>: <span class="title">UIViewRepresentable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> placeholder: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> onCommit: ((<span class="keyword">_</span> text: <span class="type">String</span>) -&gt; <span class="type">Void</span>)<span class="operator">?</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeUIView</span><span class="params">(context: UIViewRepresentableContext&lt;SearchBar&gt;)</span></span> -&gt; <span class="type">UISearchBar</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> searchBar <span class="operator">=</span> <span class="type">UISearchBar</span>(frame: .zero)</span><br><span class="line">        searchBar.delegate <span class="operator">=</span> context.coordinator</span><br><span class="line"></span><br><span class="line">        searchBar.placeholder <span class="operator">=</span> placeholder</span><br><span class="line">        searchBar.autocapitalizationType <span class="operator">=</span> .none</span><br><span class="line">        searchBar.searchBarStyle <span class="operator">=</span> .minimal</span><br><span class="line">        <span class="keyword">return</span> searchBar</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateUIView</span><span class="params">(<span class="keyword">_</span> uiView: UISearchBar, context: UIViewRepresentableContext&lt;SearchBar&gt;)</span></span> &#123;</span><br><span class="line">        uiView.text <span class="operator">=</span> text</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeCoordinator</span><span class="params">()</span></span> -&gt; <span class="type">SearchBar</span>.<span class="type">Coordinator</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Coordinator</span>(text: <span class="variable">$text</span>, onCommit: <span class="keyword">self</span>.onCommit)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Coordinator</span>: <span class="title">NSObject</span>, <span class="title">UISearchBarDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Binding</span> <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line">        <span class="keyword">var</span> onCommit: ((<span class="keyword">_</span> text: <span class="type">String</span>) -&gt; <span class="type">Void</span>)<span class="operator">?</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">init</span>(text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;, onCommit: ((<span class="keyword">_</span> text: <span class="type">String</span>) -&gt; <span class="type">Void</span>)<span class="operator">?</span>) &#123;</span><br><span class="line">            _text <span class="operator">=</span> text</span><br><span class="line">            <span class="keyword">self</span>.onCommit <span class="operator">=</span> onCommit</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">searchBar</span><span class="params">(<span class="keyword">_</span> searchBar: UISearchBar, textDidChange searchText: String)</span></span> &#123;</span><br><span class="line">            text <span class="operator">=</span> searchText</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">searchBarSearchButtonClicked</span><span class="params">(<span class="keyword">_</span> searchBar: UISearchBar)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> onCommit <span class="operator">=</span> <span class="keyword">self</span>.onCommit &#123;</span><br><span class="line">                onCommit(searchBar.text <span class="operator">??</span> <span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UIViewRepresentable</code>是SwiftUI框架中提供的用于将UIView转换成SwiftUI中View的协议。</p><p><code>func makeUIView(context: Self.Context) -&gt; Self.UIViewType</code>用来创建View的方法，遵守UIViewRepresentable协议的类必须要实现这个方法。它的返回值是一个UIView类的实例。这个方法只会在创建View时调用一次，当View需要更新时会调用下面的这个方法。</p><p><code>func updateUIView(_ uiView: Self.UIViewType, context: Self.Context)</code>当UIView发生任何需要更新状态的事件时，这个方法就会被调用来更新View的状态。</p><p><code>func makeCoordinator() -&gt; Self.Coordinator</code>需要一个<code>Coordinator</code>的实例作为返回值。它通常用来处理一些事件（点击、时间、delegate、通知）引起了UIView的状态变化后，能够将新的状态反映到View上。</p><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。</p></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;SwiftUI没有提供UISearchBar，虽然我们可以通过使用TextField来自己实现SeachBar的效果，不过要想实现一个和UISearchBar同样的控件并不容易，尤其是清除按钮和搜索图标。&lt;/p&gt;
&lt;p&gt;这里推荐直接使用UISearchBar和UIViewRepresentable协议来一个SearchBar。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SwiftUI" scheme="http://www.iosprogrammer.tech/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>iOS设置渐变色，给border设置渐变色</title>
    <link href="http://www.iosprogrammer.tech/ios/ios-gradient-color/"/>
    <id>http://www.iosprogrammer.tech/ios/ios-gradient-color/</id>
    <published>2021-03-07T12:50:56.000Z</published>
    <updated>2021-03-08T01:50:12.123Z</updated>
    
    <content type="html"><![CDATA[<p>本文将从4行代码出发给一个view设置渐变色，分别会谈到几个重要的渐变色相关属性，在使用过程中有几个需要特别关注的点。</p><p>给一个view的border设置渐变色是比较高阶的用法，希望本文可以在这个方面帮助到你。</p><a id="more"></a><p><img src="../../images/first/ios-gradient-color-border.png" alt="ios渐变色"></p><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。</p></div><h1 id="给view设置渐变色"><a href="#给view设置渐变色" class="headerlink" title="给view设置渐变色"></a>给view设置渐变色</h1><p>通过4行代码就可以给一个view设置渐变色：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> view <span class="operator">=</span> <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">100</span>, y: <span class="number">100</span>, width: <span class="number">100</span>, height: <span class="number">100</span>))</span><br><span class="line"><span class="keyword">let</span> gradientLayer <span class="operator">=</span> <span class="type">CAGradientLayer</span>()</span><br><span class="line">gradientLayer.frame <span class="operator">=</span> view.bounds</span><br><span class="line"><span class="comment">// @[(__bridge id)[UIColor redColor].CGColor, (__bridge id)[UIColor yellowColor].CGColor]</span></span><br><span class="line">gradientLayer.colors <span class="operator">=</span> [<span class="type">UIColor</span>.red.cgColor, <span class="type">UIColor</span>.yellow.cgColor]</span><br><span class="line">view.layer.addSublayer(gradientLayer)</span><br></pre></td></tr></table></figure><p>在创建<code>CAGradientLayer</code>以后需要设置<code>frame</code>才能展示出来，否则它的大小会使用默认的0。</p><p>渐变色会根据<code>colors</code>数组来展示，这个数组的类型是<code>CGColorRef</code>，所以需要用<code>.cgColor</code>强制转换；如果使用的OC语法，必须加上<code>(__bridge id)</code>，否则渐变色会显示不出来。</p><p>默认情况下渐变会从上至下，可是通过设置<code>startPoint</code>和<code>endPoint</code>来改变这个顺序：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gradientLayer.startPoint <span class="operator">=</span> <span class="type">CGPoint</span>(x: <span class="number">0</span>, y: <span class="number">0</span>)</span><br><span class="line">gradientLayer.endPoint <span class="operator">=</span> <span class="type">CGPoint</span>(x: <span class="number">1</span>, y: <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这两个点的范围是从0到1，也就是说最左边和最上边是0，最下和最右是1。这个例子中渐变会变成从左上角到右下角。</p><p>渐变色还有一个重要的属性是<code>locations</code>，这个属性是用来指定<code>colors</code>中设置的每个颜色的终点的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradientLayer.locations <span class="operator">=</span> [<span class="number">0.2</span>, <span class="number">0.8</span>]</span><br></pre></td></tr></table></figure><p>locations中元素的范围是从0到1。在这里，数组中的第一个元素<em>0.2</em>指定了colors数组中第一个元素<em>红色</em>的终点是0.2，也就是说把整个渐变色范围分成10份，从开始到<em>2/10</em>处都是纯红色，从<em>2/10</em>到<em>8/10</em>处是纯红色到纯黄色的渐变，而从<em>8/10</em>到<em>10/10</em>是纯黄色。</p><h1 id="给view的border设置渐变色"><a href="#给view的border设置渐变色" class="headerlink" title="给view的border设置渐变色"></a>给view的border设置渐变色</h1><p>使用<code>UIBezierPath</code>来创建一个带圆角的<code>CAShapeLayer</code>，并且把它的圆角设置成view的圆角，就可以把一个view的border设置为渐变色。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">...</span> <span class="comment">// 同上给view设置gradientLayer</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">let</span> shapeLayer <span class="operator">=</span> <span class="type">CAShapeLayer</span>()</span><br><span class="line">shapeLayer.borderWidth <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">shapeLayer.path <span class="operator">=</span> <span class="type">UIBezierPath</span>(roundedRect: gradientLayer.bounds, cornerRadius: <span class="number">10</span>).cgPath</span><br><span class="line">shapeLayer.fillColor <span class="operator">=</span> <span class="type">UIColor</span>.clear.cgColor <span class="comment">// 必须要设置成clearColor或者nil，默认是黑色</span></span><br><span class="line">shapeLayer.strokeColor <span class="operator">=</span> <span class="type">UIColor</span>.white.cgColor <span class="comment">// 随便设置一个非clearColor的颜色</span></span><br><span class="line">        </span><br><span class="line">gradientLayer.mask <span class="operator">=</span> shapeLayer</span><br><span class="line"></span><br><span class="line">view.layer.addSublayer(gradientLayer)</span><br></pre></td></tr></table></figure><ol><li><em>borderWidth</em> shapeLayer的border宽度和view的相同，可以根据设计图来设置。</li><li><em>cornerRadius</em> UIBezierPath的圆角和view的圆角相同；<em>roundedRect</em>和<em>CAGradientLayer</em>的大小相同。</li><li><em>fillColor</em> 是shapeLayer的填充色，默认是黑色，建议设置成nil或者是透明色<code>clearColor</code></li><li><em>strokeColor</em> 是border的描边色，如果设置成clearColor的话就不会绘制出来border了，这里随便一个颜色就是让其能够绘制出来，实际使用的是渐变色</li><li><em>mask</em> 用shapeLayer作为gradientLayer的mask，可以让gradientLayer内部挖空，只保留边缘border的渐变颜色</li><li>最终把渐变色layer添加到view.layer上，shapeLayer只是用来修饰gradientlayer的，目的是把gradientlayer的内部挖空，并且把border和圆角做出来。</li></ol><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。</p></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过这篇文章我们了解了怎么给一个view设置渐变色，并详细阐述了渐变色的几个重要属性。关于给border设置渐变色是一个进阶的知识点。</p><p>希望本篇文章能够帮助到你，也欢迎你把文章分享到朋友圈或微博。</p><p>有任何问题都可以到公众号给我发信息。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文将从4行代码出发给一个view设置渐变色，分别会谈到几个重要的渐变色相关属性，在使用过程中有几个需要特别关注的点。&lt;/p&gt;
&lt;p&gt;给一个view的border设置渐变色是比较高阶的用法，希望本文可以在这个方面帮助到你。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="http://www.iosprogrammer.tech/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>environment和environmentObject的区别及适用场景</title>
    <link href="http://www.iosprogrammer.tech/swiftui/environment-vs-environmentObject/"/>
    <id>http://www.iosprogrammer.tech/swiftui/environment-vs-environmentObject/</id>
    <published>2021-03-05T03:25:18.000Z</published>
    <updated>2021-03-05T07:01:31.618Z</updated>
    
    <content type="html"><![CDATA[<p>SwiftUI中传递环境变量时会发现两个相似的方法：<code>environment&lt;V&gt;(_ keyPath:, _ value:)</code>和<code>environmentObject&lt;T&gt;(_ object:)</code>，这篇文章我们来看一下这两个方法的不同之处和分别的适用场景。</p><a id="more"></a><p><img src="../../images/first/swiftui-environmentobject-environment.png" alt="Swift环境变量对比"></p><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。回复“博客”免费获取各大互联网公司面试题。</p></div><p>首先要明确的一点是，这两个方法都是用来设置环境变量的，而环境变量会影响到被设置变量的视图以及它的所有子视图，并且这个传递过程不需要明确指出。</p><p>也就是说，假设有三个视图，view1、view2、view3，其中view2和view3是view1的子视图，要想在view2和view3中使用view1设置的环境变量的话，只需要直接在view中使用<code>@EnvironmentObject</code>或者<code>@Environment</code>而不需要在创建view2和view3的时候显式传参。</p><h1 id="EnvironmentObject"><a href="#EnvironmentObject" class="headerlink" title="@EnvironmentObject"></a>@EnvironmentObject</h1><p>下面以<code>@EnvironmentObject</code>举例说明上面的这段话：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 公众号——iOS开发栈</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OfficalAccount</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> amount <span class="operator">=</span> <span class="number">3000</span> <span class="comment">// 订阅人数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DetailView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EnvironmentObject</span> <span class="keyword">var</span> account: <span class="type">OfficalAccount</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Increase Score in detailView&quot;</span>) &#123;</span><br><span class="line">                account.amount <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;account: <span class="subst">\(account.amount)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DetailView2</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EnvironmentObject</span> <span class="keyword">var</span> account: <span class="type">OfficalAccount</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Score: <span class="subst">\(account.amount)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">var</span> account <span class="operator">=</span> <span class="type">OfficalAccount</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Increase Score&quot;</span>) &#123;</span><br><span class="line">                account.amount <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">DetailView</span>()</span><br><span class="line">            <span class="type">DetailView2</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        .environmentObject(account)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子是以我的公众号（”iOS开发栈“）的订阅人数做说明，可以看出<em>ContentView</em>创建<em>DetailView</em>和<em>DetailView2</em>时并没有直接传递变量<em>accout</em>，但是结果是这两个子视图中的数量显示会随着点击按钮而增加。</p><p>对上面使用<code>environmentObject</code>进行环境变量传递有几点需要注意：</p><ul><li>使用<code>@Environment</code>、<code>@StateObject</code>、<code>@ObservedObject</code>包装的类必须遵守<code>ObservableObject</code>协议，并且只能是类不能是结构体，否则会报错 <mark class="label danger">Non-class type OfficalAccount cannot conform to class protocol ObservableObject</mark></li><li><code>@Published</code>也只能在<em>class</em>中使用，如果放在了struct中，会报错<mark class="label danger">'wrappedValue' is unavailable: </mark></li><li>使用<code>@EnvironmentObject</code>包装的变量是不需要初始化的，编译器会从环境变量中获取这个对象的值</li><li>在子视图中可以修改了环境变量的值，并且这个改变会在当前的视图层级中传递</li></ul><h1 id="Environment"><a href="#Environment" class="headerlink" title="@Environment"></a>@Environment</h1><p>而对于<code>@Environment</code>来说，它主要是用来处理一些当前的系统设置的，比如说语言、时区、黑暗模式、CoreData的Context等。</p><p>在使用过程中一个很大的不同是，<code>@Environment(_ keyPath:)</code>需要指定一个类型为<code>KeyPath</code>的参数，而这个参数大多数情况下我们都是使用的<code>EnvironmentValues</code>中已经定义好的，比如<code>managedObjectContext</code>/<code>locale</code>等。</p><p>下面以使用<em>CoreData</em>为例说明使用方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.swift</span></span><br><span class="line"><span class="operator">...</span></span><br><span class="line"><span class="keyword">let</span> persistenceController <span class="operator">=</span> <span class="type">PersistenceController</span>.shared</span><br><span class="line"><span class="operator">...</span></span><br><span class="line"><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">    <span class="type">WindowGroup</span> &#123;</span><br><span class="line">        <span class="type">ContentView</span>()</span><br><span class="line">            .environment(\.managedObjectContext, persistenceController.container.viewContext)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="operator">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ContentView.swift</span></span><br><span class="line"><span class="operator">...</span></span><br><span class="line"><span class="meta">@Environment</span>(\.managedObjectContext) <span class="keyword">private</span> <span class="keyword">var</span> viewContext</span><br><span class="line"><span class="operator">...</span></span><br><span class="line"><span class="keyword">let</span> newItem <span class="operator">=</span> <span class="type">Item</span>(context: viewContext)</span><br><span class="line">newItem.platform <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="operator">...</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们在<em>App.swift</em>中创建了<code>persistenceController</code>并通过调用<code>.environment</code>把值传递给了<em>ContentView</em>。<em>ContentView</em>中使用<code>@Environment(\.managedObjectContext) private var viewContext</code>获取到了这个环境变量。</p><p>除了需要一个KeyPath和上面提到的主要用来处理系统自带的环境变量外，<code>@Environment</code>和<code>@EnvironmentObject</code>在用法上相差不大。</p><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。回复“博客”免费获取各大互联网公司面试题。</p></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过灵活使用环境变量，可以让开发过程更加简单，页面之间可以写更少的值传递（正向、反相）相关代码。通过本文对<code>Environment</code>和<code>EnvironmentObject</code>的对比，我们更深入的了解了SwiftUI中环境变量的一些使用细节。</p><p>如果本文对你有帮助请帮忙分享到朋友圈或者微博。</p><p>如果有任何问题也可以到公众号联系我。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;SwiftUI中传递环境变量时会发现两个相似的方法：&lt;code&gt;environment&amp;lt;V&amp;gt;(_ keyPath:, _ value:)&lt;/code&gt;和&lt;code&gt;environmentObject&amp;lt;T&amp;gt;(_ object:)&lt;/code&gt;，这篇文章我们来看一下这两个方法的不同之处和分别的适用场景。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SwiftUI" scheme="http://www.iosprogrammer.tech/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>在SwiftUI中实现UISegmentControl</title>
    <link href="http://www.iosprogrammer.tech/swiftui/swiftui-uisegmentcontrol/"/>
    <id>http://www.iosprogrammer.tech/swiftui/swiftui-uisegmentcontrol/</id>
    <published>2021-03-04T03:09:44.000Z</published>
    <updated>2021-03-04T10:24:09.339Z</updated>
    
    <content type="html"><![CDATA[<p>在SwiftUI中官方把控件做了精简，造成有些在UIKit中使用的控件找不到了。这篇文章来看一下UIPickerView在SwiftUI中是怎么表示的。</p><a id="more"></a><p>了解了一些SwiftUI的基础知识以后，应该就知道有一个<code>Picker</code>控件，想要实现UISegmentControl的效果就要用到这个控件。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">var</span> platform <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">Picker</span>(<span class="string">&quot;平台名称&quot;</span>, selection: <span class="variable">$platform</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;支付宝&quot;</span>).tag(<span class="number">1</span>).navigationTitle(<span class="string">&quot;选择平台&quot;</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;京东金融&quot;</span>).tag(<span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .pickerStyle(<span class="type">SegmentedPickerStyle</span>())</span><br><span class="line">        </span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(platform)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这段代码就可以得到一个UISegmentControl效果的Picker了。</p><p>其中关键部分是<code>.pickerStyle(SegmentedPickerStyle())</code>，pickerStyle是一个设置Picker样式的Modifier，<code>SegmentedPickerStyle</code>就是外型和UISegmentControl一摸一样的效果。</p><p>除了SegmentedPickerStyle以外，pickerStyle还有下面几种类型：</p><ul><li><code>DefaultPickerStyle</code> 在不同平台有不同的展现形式。iOS平台上和<em>InlinePickerStyle</em>相同都是滚轮样式；MacOS平台和<em>MenuPickerStyle</em>相同；tvOS平台上和<em>SegmentedPickerStyle</em>相同</li><li><code>InlinePickerStyle</code>/<code>WheelPickerStyle</code> 滚轮样式</li><li><code>MenuPickerStyle</code> 点击后Picker的text后弹出选项，有点类似于<code>MenuController</code></li><li><code>RadioGroupPickerStyle</code> MacOS上使用的，所有选项一字排开，每个前面都有一个复选框☑️</li><li><code>SegmentedPickerStyle</code> 上面说的模仿UISegmentControl的外形，使用这种style的时候，Picker的content只能是Text或者Image</li></ul><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。</p></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;在SwiftUI中官方把控件做了精简，造成有些在UIKit中使用的控件找不到了。这篇文章来看一下UIPickerView在SwiftUI中是怎么表示的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SwiftUI" scheme="http://www.iosprogrammer.tech/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>3个关于SwiftUI中TextField不得不看的知识点</title>
    <link href="http://www.iosprogrammer.tech/swiftui/swiftui-textfield/"/>
    <id>http://www.iosprogrammer.tech/swiftui/swiftui-textfield/</id>
    <published>2021-02-27T12:21:57.000Z</published>
    <updated>2021-02-27T13:12:43.176Z</updated>
    
    <content type="html"><![CDATA[<p>几乎每一个iOS App都需要处理用户交互，输入框作为获取用户输入内容的最常用控件之一是开发者经常用到的一个控件。这篇文章我们来看一下在iOS14中怎么使用全新的SwiftUI框架来处理TextField。</p><a id="more"></a><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。</p></div><p><img src="../../images/first/swiftui-textfiled.png" alt="SwiftUI TextField知识点"></p><h1 id="SwiftUI创建一个基础的TextField"><a href="#SwiftUI创建一个基础的TextField" class="headerlink" title="SwiftUI创建一个基础的TextField"></a>SwiftUI创建一个基础的TextField</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> aStr <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">&quot;公众号&lt;iOS开发栈&gt;&quot;</span>, text: <span class="variable">$aStr</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="type">Text</span>(aStr)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个<code>TextField</code>需要两个参数，一个占位符和一个<a href="https://www.iosprogrammer.tech/swiftui/swiftui-data-flow.html"><code>Bind&lt;Binding&lt;String</code></a>。</p><h1 id="TextFieldStyle"><a href="#TextFieldStyle" class="headerlink" title="TextFieldStyle"></a>TextFieldStyle</h1><p>通过设置<code>textFieldStyle</code>可以修改<code>TextField</code>的展现样式，在SwiftUI中系统自带了UIKit框架中的几个样式：<code>DefaultTextFieldStyle</code>/<code>PlainTextFieldStyle</code>/<code>RoundedBorderTextFieldStyle</code>。</p><p>设置的方法是：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TextField</span>(<span class="string">&quot;公众号&lt;iOS开发栈&gt;&quot;</span>, text: <span class="variable">$aStr</span>)</span><br><span class="line">    .textFieldStyle(<span class="type">DefaultTextFieldStyle</span>())</span><br></pre></td></tr></table></figure><blockquote><p>如果系统自带的这三种样式都不能满足需求，也可以自定义TextField的样式</p></blockquote><h1 id="TextField文本对齐方式"><a href="#TextField文本对齐方式" class="headerlink" title="TextField文本对齐方式"></a>TextField文本对齐方式</h1><p>在SwiftUI中设置TextField的文本对齐方式使用的modifier是<code>multilineTextAlignment</code>，其中包含<code>leading</code>/<code>center</code>/<code>trailing</code>三种对齐方式。</p><p>使用这个modifier的方法如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TextField</span>(<span class="string">&quot;公众号&lt;iOS开发栈&gt;&quot;</span>, text: <span class="variable">$aStr</span>)</span><br><span class="line">    .multilineTextAlignment(.trailing)</span><br></pre></td></tr></table></figure><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。</p></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇文章对SwiftUI框架中的<code>TextFiled</code>控件进行了讲解，主要涉及了创建方法、修改展示样式和设置文本对齐方法三个方面，希望对你有所帮助。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;几乎每一个iOS App都需要处理用户交互，输入框作为获取用户输入内容的最常用控件之一是开发者经常用到的一个控件。这篇文章我们来看一下在iOS14中怎么使用全新的SwiftUI框架来处理TextField。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SwiftUI" scheme="http://www.iosprogrammer.tech/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI给Color添加扩展支持十六进制字符串</title>
    <link href="http://www.iosprogrammer.tech/swiftui/SwiftUI-Color-Hex/"/>
    <id>http://www.iosprogrammer.tech/swiftui/SwiftUI-Color-Hex/</id>
    <published>2021-02-26T03:06:25.000Z</published>
    <updated>2021-02-26T03:21:50.689Z</updated>
    
    <content type="html"><![CDATA[<p>SwiftUI中使用<code>Color</code>表示颜色，为了能够尽量独立的使用SwiftUI特性，我们通过给Color添加一个简单的扩展来满足对十六进制颜色的使用。</p><a id="more"></a><p>下面是这个扩展的所有代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>(hex: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> hex <span class="operator">=</span> hex.trimmingCharacters(<span class="keyword">in</span>: <span class="type">CharacterSet</span>.alphanumerics.inverted)</span><br><span class="line">        <span class="keyword">var</span> int: <span class="type">UInt64</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="type">Scanner</span>(string: hex).scanHexInt64(<span class="operator">&amp;</span>int)</span><br><span class="line">        <span class="keyword">let</span> a, r, g, b: <span class="type">UInt64</span></span><br><span class="line">        <span class="keyword">switch</span> hex.count &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// RGB (12-bit)</span></span><br><span class="line">            (a, r, g, b) <span class="operator">=</span> (<span class="number">255</span>, (int <span class="operator">&gt;&gt;</span> <span class="number">8</span>) <span class="operator">*</span> <span class="number">17</span>, (int <span class="operator">&gt;&gt;</span> <span class="number">4</span> <span class="operator">&amp;</span> <span class="number">0xF</span>) <span class="operator">*</span> <span class="number">17</span>, (int <span class="operator">&amp;</span> <span class="number">0xF</span>) <span class="operator">*</span> <span class="number">17</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>: <span class="comment">// RGB (24-bit)</span></span><br><span class="line">            (a, r, g, b) <span class="operator">=</span> (<span class="number">255</span>, int <span class="operator">&gt;&gt;</span> <span class="number">16</span>, int <span class="operator">&gt;&gt;</span> <span class="number">8</span> <span class="operator">&amp;</span> <span class="number">0xFF</span>, int <span class="operator">&amp;</span> <span class="number">0xFF</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>: <span class="comment">// ARGB (32-bit)</span></span><br><span class="line">            (a, r, g, b) <span class="operator">=</span> (int <span class="operator">&gt;&gt;</span> <span class="number">24</span>, int <span class="operator">&gt;&gt;</span> <span class="number">16</span> <span class="operator">&amp;</span> <span class="number">0xFF</span>, int <span class="operator">&gt;&gt;</span> <span class="number">8</span> <span class="operator">&amp;</span> <span class="number">0xFF</span>, int <span class="operator">&amp;</span> <span class="number">0xFF</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            (a, r, g, b) <span class="operator">=</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(</span><br><span class="line">            .sRGB,</span><br><span class="line">            red: <span class="type">Double</span>(r) <span class="operator">/</span> <span class="number">255</span>,</span><br><span class="line">            green: <span class="type">Double</span>(g) <span class="operator">/</span> <span class="number">255</span>,</span><br><span class="line">            blue:  <span class="type">Double</span>(b) <span class="operator">/</span> <span class="number">255</span>,</span><br><span class="line">            opacity: <span class="type">Double</span>(a) <span class="operator">/</span> <span class="number">255</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Color</span>(hex: <span class="string">&quot;#FF6D5D&quot;</span>)</span><br></pre></td></tr></table></figure><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。</p></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;SwiftUI中使用&lt;code&gt;Color&lt;/code&gt;表示颜色，为了能够尽量独立的使用SwiftUI特性，我们通过给Color添加一个简单的扩展来满足对十六进制颜色的使用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SwiftUI" scheme="http://www.iosprogrammer.tech/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>详解SwiftUI中Divider和Spacer的用法和区别（最新）</title>
    <link href="http://www.iosprogrammer.tech/swiftui/swiftui-divide-spacer/"/>
    <id>http://www.iosprogrammer.tech/swiftui/swiftui-divide-spacer/</id>
    <published>2021-02-17T11:43:10.000Z</published>
    <updated>2021-02-25T06:53:41.437Z</updated>
    
    <content type="html"><![CDATA[<p>Divider和Spacer都可以用到分割两个视图，但是它们也有一些区别。通过这篇文章我们将学到这两个控件的使用方式和它们之间的区别。</p><a id="more"></a><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。</p></div><p><img src="../../images/first/SwiftUI-Divider-Spacer.jpg" alt="SwiftUI-Divider-vs-Spacer"></p><h1 id="Spacer"><a href="#Spacer" class="headerlink" title="Spacer"></a>Spacer</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Top&quot;</span>).background(<span class="type">Color</span>.red)</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Bottom&quot;</span>).background(<span class="type">Color</span>.red)</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(width: <span class="number">100</span>, height: <span class="number">400</span>, alignment: .center)</span><br><span class="line">        .background(<span class="type">Color</span>.yellow)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在“Top”和“Bottom”之间添加一个<code>Spacer</code>控件，会把这两个文字隔开，使这两个文字分别位于最上和最下面。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Spacer</span>(minLength: <span class="number">30</span>)</span><br></pre></td></tr></table></figure><p>通过设置<code>minLength</code>可以指定被分开的两个视图的最小距离，如果不指定的话，会有一个默认的距离。</p><h1 id="Divider"><a href="#Divider" class="headerlink" title="Divider"></a>Divider</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Top&quot;</span>).background(<span class="type">Color</span>.red)</span><br><span class="line">    <span class="type">Divider</span>().background(<span class="type">Color</span>.red)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Bottom&quot;</span>).background(<span class="type">Color</span>.red)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Top和Bottom之间添加一个Divider控件可以在两个视图之间添加一个间隔，和上面的<code>Spacer</code>不同的是中间会出现一根线，<code>background</code>设置的颜色会影响到这根线的颜色。</p><p>并且，被Divider分割的两个视图中间的距离是固定的，它们不会移动到父视图的两端。</p><p>另外，把<code>Divider</code>的高度分别设置为0之后，被它分割的两个视图不会靠在一起。但是把<code>Spacer</code>的高度设置为0，被它分割的两个视图会靠在一起，就和没有被分割一样。</p><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。回复“博客”免费获取各大互联网公司面试题。</p></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇文章学习了SwiftUI中<code>Spacer</code>和<code>Divider</code>的用法以及它们之间的区别，这两个控件在SwiftUI中虽然简单但是非常的常用，我们一定要熟悉。如果你有任何的问题、建议都可以通过<a href="https://weibo.com/7414691003/profile">微博</a>或<a href="mailto:shizhiang@126.com">邮件</a>联系到我本人。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Divider和Spacer都可以用到分割两个视图，但是它们也有一些区别。通过这篇文章我们将学到这两个控件的使用方式和它们之间的区别。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SwiftUI" scheme="http://www.iosprogrammer.tech/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>iOS完整集成admob教程（2021）</title>
    <link href="http://www.iosprogrammer.tech/ios/ios-integrate-admob/"/>
    <id>http://www.iosprogrammer.tech/ios/ios-integrate-admob/</id>
    <published>2021-02-06T11:57:33.000Z</published>
    <updated>2021-02-25T06:53:41.437Z</updated>
    
    <content type="html"><![CDATA[<p>Admob是谷歌推出的广告服务，其中包含的广告类型有：banner、插屏、激励、开屏（最近添加的）。利用Admob的中介组可以引入其他广告商的广告，比如FaceBook、unity等10多家平台。对于出海的App集成Admob是非常必要的变现手段。</p><a id="more"></a><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。</p></div><p><img src="../../images/admob/admob.png" alt="Admob 集成"></p><h1 id="通过Cocoapods导入Admob-SDK"><a href="#通过Cocoapods导入Admob-SDK" class="headerlink" title="通过Cocoapods导入Admob SDK"></a>通过Cocoapods导入Admob SDK</h1><p>通过Cocoapods导入SDK是最简单的方法，如果不知道Cocoapods的使用方法可以看一下<a href="https://cocoapods.org/">官方文档</a>。在Podfile中添加一行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#39;Google-Mobile-Ads-SDK&#39;</span><br></pre></td></tr></table></figure><p>之后在终端执行命令行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install --repo-update</span><br></pre></td></tr></table></figure><h1 id="修改主工程的info-plist文件"><a href="#修改主工程的info-plist文件" class="headerlink" title="修改主工程的info.plist文件"></a>修改主工程的info.plist文件</h1><p>在主工程的info.plist文件中添加两个键值对：</p><ol><li><code>GADApplicationIdentifier</code>对应的是你的app在Admob申请到的App ID。</li><li><code>SKAdNetworkItems</code>对应的是一个固定的<code>cstr6suwn9.skadnetwork</code>。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;GADApplicationIdentifier&lt;&#x2F;key&gt;</span><br><span class="line">&lt;string&gt;ca-app-pub-3940256099942544~1458002511&lt;&#x2F;string&gt;</span><br><span class="line">&lt;key&gt;SKAdNetworkItems&lt;&#x2F;key&gt;</span><br><span class="line">  &lt;array&gt;</span><br><span class="line">    &lt;dict&gt;</span><br><span class="line">      &lt;key&gt;SKAdNetworkIdentifier&lt;&#x2F;key&gt;</span><br><span class="line">      &lt;string&gt;cstr6suwn9.skadnetwork&lt;&#x2F;string&gt;</span><br><span class="line">    &lt;&#x2F;dict&gt;</span><br><span class="line">  &lt;&#x2F;array&gt;</span><br></pre></td></tr></table></figure><p>添加之后的info.plist效果：<br><img src="../../images/admob/quick_start_skadnetwork.png" alt="info.plist添加Admob"></p><p>关于注册Admob账号和获取App ID的内容可以到<a href="https://apps.admob.com/v2/home">Admob的官方网站</a>查看。</p><h1 id="初始化Admob-SDK"><a href="#初始化Admob-SDK" class="headerlink" title="初始化Admob SDK"></a>初始化Admob SDK</h1><p>在<code>AppDelegate</code>中添加初始化Admob SDK的代码</p><div class="tabs" id="initialize-admob-sdk"><ul class="nav-tabs"><li class="tab active"><a href="#initialize-admob-sdk-1">Objective-C</a></li><li class="tab"><a href="#initialize-admob-sdk-2">Swift</a></li></ul><div class="tab-content"><div class="tab-pane active" id="initialize-admob-sdk-1"><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> GoogleMobileAds;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AppDelegate</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application</span><br><span class="line">    didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line"></span><br><span class="line">  [[GADMobileAds sharedInstance] startWithCompletionHandler:<span class="literal">nil</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="initialize-admob-sdk-2"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> GoogleMobileAds</span><br><span class="line"></span><br><span class="line"><span class="keyword">@UIApplicationMain</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span>: <span class="title">UIResponde</span>, <span class="title">UIApplicationDelegate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="keyword">_</span> application: UIApplication,</span></span></span><br><span class="line"><span class="function"><span class="params">      didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: <span class="keyword">Any</span>]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">GADMobileAds</span>.sharedInstance().start(completionHandler: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><p>到这里，我们就可以根据需要来在App的不同位置添加需要的广告类型了。</p><p>因为类型比较多，这里如果分别介绍的话篇幅就太长了。所以在这篇文章只说一下需要注意的地方，详细的集成方法可以到<a href="https://developers.google.com/admob/ios/quick-start">Admob开发官网</a>查看。</p><h1 id="各种Admob广告类型的最佳实践方案"><a href="#各种Admob广告类型的最佳实践方案" class="headerlink" title="各种Admob广告类型的最佳实践方案"></a>各种Admob广告类型的最佳实践方案</h1><p>不同类型的Admob广告适用于不同的场景，按照场景放广告不仅更能被用户接受，而且对广告营收有一定的益处。相反，如果不按照推荐方法来展示广告有可能会被广告商警告，严重的话可能会被禁止投放（我们就被Facebook警告了）。</p><ol><li>Banner广告是那种长条状的横幅形式，建议放在屏幕的边缘处，对于手机屏幕建议放在屏幕的最上面或者最下面。</li><li>插屏广告是一种全屏展示的广告，可能是一张图片或者一个视频，只有用户点击关闭按钮是才会关闭。这种广告对用户打扰非常大，建议放在界面切换的时候才展示这种广告，<strong>并且不能在push到一个新页面以后再展示</strong>，比如说不能在到一个新页面后网络请求服务端的过程中展示这个广告。</li><li>Native广告（原生广告）是一种比较特殊的广告形式，它通过SDK来实现广告加载，加载到的是广告的一些组件（文字、图片、视频），我们可以自定义组件的展示位置和大小。<strong>这种广告适合用在启动图或者列表（UITableView/UICollectionView）中。</strong></li><li>激励视频广告是一种可以让用户通过观看广告获取App内奖励的广告形式，在游戏类App中十分常见。在弹出这种广告前一定要让用户选择是否要通过看广告获取“更多奖励”。</li></ol><h1 id="使用Admob中介组聚合多个平台广告"><a href="#使用Admob中介组聚合多个平台广告" class="headerlink" title="使用Admob中介组聚合多个平台广告"></a>使用Admob中介组聚合多个平台广告</h1><p>谷歌广告平台不仅有自家的Admob广告还有很多其他广告平台的资源，我们在集成了<code>Google-Mobile-Ads-SDK</code>的基础上通过添加不同平台的中介组（Mediation）来快速获取不同平台的广告。</p><p>在这里我们仅以集成Facebook的广告为例做一下说明，其他平台的广告也都大同小异。如果在集成过程中有什么问题也可以到公众号“iOS开发栈”问我。</p><p>在<code>Podfile</code>文件中添加Admob SDK和Facebook的中介组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod &#39;Google-Mobile-Ads-SDK&#39;,</span><br><span class="line">pod &#39;GoogleMobileAdsMediationFacebook&#39;</span><br></pre></td></tr></table></figure><p>之后在终端切换到项目所在目录，并执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;当前项目目录&gt;</span><br><span class="line">pod install --repo-update</span><br></pre></td></tr></table></figure><p>安装完Admob SDk和FB的广告中介组以后，就可以直接使用对应的广告形式了。对应广告形式的使用方式可以到上一节查看，这里不再赘述。</p><p>这里有一点需要强调的是在初始化不同的广告形式需要调用<code>initWithAdUnitID:</code>方法，这里的<em>UnitID</em>是广告但愿ID，可以在Admob的管理后台-&gt;广告单元页面查看。</p><p><img src="../../images/admob/UnitId.png" alt="Admob UnitID"></p><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。回复“博客”免费获取各大互联网公司面试题。</p></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>谷歌的Admob服务和其他广告商相比文档更加全面（不过文档中也可能有错误），社区也非常活跃（我曾经提过一个问题，很快可以得到回复）。这篇文章是我在使用过程中的一些总结，里面除了基础的集成方法外，大都是使用过程中的注意事项，至于详细的集成过程推荐到<a href="https://developers.google.com/admob/ios/quick-start">官方文档</a>中查看。如果你有任何的问题、建议都可以通过<a href="https://weibo.com/7414691003/profile">微博</a>或<a href="mailto:shizhiang@126.com">邮件</a>联系到我本人。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Admob是谷歌推出的广告服务，其中包含的广告类型有：banner、插屏、激励、开屏（最近添加的）。利用Admob的中介组可以引入其他广告商的广告，比如FaceBook、unity等10多家平台。对于出海的App集成Admob是非常必要的变现手段。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="http://www.iosprogrammer.tech/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>详解SwiftUI数据流是怎么在View间传递的</title>
    <link href="http://www.iosprogrammer.tech/swiftui/swiftui-data-flow/"/>
    <id>http://www.iosprogrammer.tech/swiftui/swiftui-data-flow/</id>
    <published>2021-02-02T06:35:42.234Z</published>
    <updated>2021-02-25T06:53:41.437Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个声明式的UI框架，SwiftUI帮我们处理了几乎所有关于UI和数据之间的交互，这使我们不再需要关注数据变化时刷新UI和用户交互以后更新数据的逻辑。</p><p>为了实现数据和UI的绑定，我们需要利用Swift的一些关属性包装器来向SwiftUI描述它们之间的关系，那么让我们开始吧。</p><a id="more"></a><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。</p></div><p><img src="../../image/../images/first/SwiftUI-Data-Flow.jpg"></p><h1 id="State-Properties-State"><a href="#State-Properties-State" class="headerlink" title="State Properties @State"></a>State Properties @State</h1><p>在<a href="https://www.iosprogrammer.tech/swiftui/what-is-the-different-between-foreach-and-list">前面的一篇文章</a>中当我们给数组添加或者删除元素时，<a href="https://www.iosprogrammer.tech/swiftui/swiftui-concept-essential.md">列表</a>会自动响应变化，正是因为使用了<code>@State</code>来标记View中的model。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> title: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(title)</span>&quot;</span>)</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">&quot;Please Enter Title&quot;</span>, text: <span class="variable">$title</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>@State</code>包装的变量是可以被SwiftUI读取的值，这些值通常是一些字符串或数字等常量值。</p><p>当被State包装的属性改变时，SwiftUI会重新计算和绘制使用到该属性的视图所在的整个视图层级，通常是说变量所在View的Body会被重新绘制，在本例子中就是指<code>ContentView</code>的body。</p><blockquote><p>被<code>@State</code>包装的变量一定要用<code>private</code>修饰，并且这个变量只能在当前view以及其子View的body中使用。</p></blockquote><p>正如TextField中的<code>$title</code>一样，我们可以通过*$*前缀把变量和另一个view绑定起来，这样就可以在另一个view中对这个变量进行修改了。下面的代码使用一个Toggle来控制Wi-Fi的开关：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> isOn <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Wi-Fi State: <span class="subst">\(isOn <span class="operator">?</span> <span class="string">&quot;On&quot;</span> : <span class="string">&quot;Off&quot;</span>)</span>&quot;</span>)</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">&quot;<span class="subst">\(isOn <span class="operator">?</span> <span class="string">&quot;wifi&quot;</span> : <span class="string">&quot;wifi.slash&quot;</span>)</span>&quot;</span>)</span><br><span class="line">            <span class="type">Toggle</span>(<span class="string">&quot;Wi-Fi State&quot;</span>, isOn: <span class="variable">$isOn</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如上面的代码所示，我们在<code>isOn</code>属性和Toggle控件之间建立了一个绑定。Toggle可以修改isOn的值，另外当isOn改变的时候，Text和Image的内容都会发生变化。</p><h1 id="State-Binding-状态绑定"><a href="#State-Binding-状态绑定" class="headerlink" title="State Binding 状态绑定"></a>State Binding 状态绑定</h1><p>使用@state包装的属性只在它所属view的内部使用，那么当它的子视图要访问这个属性的时候就要用到<code>@binding</code>了。就像上面例子用到的<code>Toggle</code>，我们把Text和Image放到一个自定义的View中。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WiFiView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> isOn: <span class="type">Bool</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Wi-Fi State: <span class="subst">\(isOn <span class="operator">?</span> <span class="string">&quot;On&quot;</span> : <span class="string">&quot;Off&quot;</span>)</span>&quot;</span>)</span><br><span class="line">        <span class="type">Image</span>(systemName: <span class="string">&quot;<span class="subst">\(isOn <span class="operator">?</span> <span class="string">&quot;wifi&quot;</span> : <span class="string">&quot;wifi.slash&quot;</span>)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们使用了<code>@Binding</code>来创建数据和界面之间的依赖，它和<code>@State</code>不同的地方在于，binding的属性并不被当前的视图所持有，并且binding的值是可以被state的属性值导出的。</p><p>在这里如果把@Binding换成@State就会使WiFiView和它的父视图分别拥有各自的isOn属性，其中一个修改不会影响到另一个，而这显然不是我们想要的结果。</p><h1 id="使用Combine框架的Publisher"><a href="#使用Combine框架的Publisher" class="headerlink" title="使用Combine框架的Publisher"></a>使用<em>Combine</em>框架的<em>Publisher</em></h1><p>使用@State包装的属性只能在当前View内部或者它的子视图中使用，并且state属性时临时的——由于state包装的属性是隶属于它所在view的，当view被销毁时对应的state属性也会消失，这明显是不够的，另外我们在开发过程中还要处理一些非界面的信息，比如说<em>Timer</em>、<em>Notification</em>等，它们携带的信息通常也会有更新界面的需求。这种情况就要用到Combine中的Publisher了。</p><p><em>Combine</em>是在iOS13中被引入的，主要目的是为了处理App中的各种事件消息。如果你之前接触过<em>RxSwift</em>或者<em>ReactiveCocoa</em>那你对这个概念应该很容易理解，它的原理就是发布者和订阅者的模式。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contact</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, age: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">        <span class="keyword">self</span>.age <span class="operator">=</span> age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ObservedObject</span> <span class="keyword">var</span> xiaowang <span class="operator">=</span> <span class="type">Contact</span>(name: <span class="string">&quot;xiaowang&quot;</span>, age: <span class="number">21</span>)</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;小王：<span class="subst">\(xiaowang.name)</span>&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 这里只是一个例子，通常不会在这里对Publisher进行修改</span></span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;修改联系人&quot;</span>) &#123;</span><br><span class="line">                xiaowang.name <span class="operator">=</span> <span class="string">&quot;小王&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先创建一个遵守<em>ObservableObject</em>协议的联系人类，然后在SwiftUI视图中添加一个被<em>ObservedObject</em>包装的变量，在body中使用这个变量，当被<em><em>@Published</em></em>包装的变量改变时，body会使用新值重新加载。</p><blockquote><p>如果你在看WWDC2019的<a href="https://developer.apple.com/wwdc19/226">Introducing Combile</a>视频的时候发现<em>BindableObject</em>/<em>didChange.send()</em>/<em>onReceive</em>，这些内容现在已经被<a href="https://developer.apple.com/forums/thread/127243">移除了</a>。</p></blockquote><blockquote><p>只有class可以遵守ObservableObject协议，否则会报错 <mark class="label danger">Non-class type Contact cannot conform to class protocol ObservableObject</mark></p></blockquote><p>在iOS14中，引入了一个新的<em><em>@StateObject</em></em>来丰富这种使用场景。它和ObservedObject的区别在于当view刷新时被ObservedObject包装的属性会重置到初始值，而被StateObject使用的不会。</p><blockquote><p>除非在某些必要的情况下需要使用ObservedObject之外，大多数情况都适用于StateObject。</p></blockquote><h1 id="环境变量-Evironment-Objects"><a href="#环境变量-Evironment-Objects" class="headerlink" title="环境变量 Evironment Objects"></a>环境变量 Evironment Objects</h1><p>除了以上列出的几个场景之外，假设我们的app需要从一个页面跳转到另一个页面，这是一个很常见的场景，并且在后一个页面要用到前面页面的一些属性。通常可以这样做：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NavigationLink</span>(destination: nextView(aModel: aModel)) &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Detail&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面用到了<strong><em>NavigationLink</em></strong>来做导航，destination是要弹出的页面，初始化时带着当前页面的一个属性。</p><p>这样处理没有什么大的问题，不过如果层级变多，后面层级又出现很多新层级，再有反向传值的话就会很复杂容易出错——就像使用UIKit的时候。而为了解决这个问题，SwiftUI引入了<strong><em>Evironment Objects</em></strong>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DataSource.swift</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataSource</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> counter <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ContentView.swift</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dataSource <span class="operator">=</span> <span class="type">DataSource</span>()</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;Click&quot;</span>) &#123;</span><br><span class="line">                    dataSource.counter <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">NavigationLink</span>(</span><br><span class="line">                    destination: <span class="type">ContactView</span>()) &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Enter Next Page&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .environmentObject(dataSource)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ContactView.swift</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContactView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EnvironmentObject</span> <span class="keyword">var</span> dataSource: <span class="type">DataSource</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(dataSource.counter)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Environment Object和ObservedObject/StateObject用法非常相似，首先DataSource遵守ObservableObject协议，要观察的属性counter使用Publisher包装。</p><p>被<em><em>@EnvironmentObject</em></em>包装的属性会随着Publised属性的改变而变化，所在的view也会重新加载。</p><p><em>.environmentObject</em>是一个<a href="https://www.iosprogrammer.tech/swiftui-concept-essential">Modifier</a>，它向环境变量中注入一个属性，如果不在使用@EnvironmentObject之前使用把属性注入到环境变量中，就会包错 <mark class="label danger">MissingEnvironmentObjectError: Missing EnvironmentObject</mark></p><div class="note info"><p>到公众号【iOS开发栈】回复“博客”免费获取各大互联网公司面试题。</p></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这篇文章中我们学习了SwiftUI框架中数据的流动相关知识，其中主要涉及了几个常用的属性包装器（property wrapper）：@State @Binding @ObservedObject @StateObject @EnvironmentObject用法和适用场景，希望对你所有帮助。如果你有任何的问题、建议都可以通过<a href="https://weibo.com/7414691003/profile">微博</a>或<a href="mailto:shizhiang@126.com">邮件</a>联系到我本人。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为一个声明式的UI框架，SwiftUI帮我们处理了几乎所有关于UI和数据之间的交互，这使我们不再需要关注数据变化时刷新UI和用户交互以后更新数据的逻辑。&lt;/p&gt;
&lt;p&gt;为了实现数据和UI的绑定，我们需要利用Swift的一些关属性包装器来向SwiftUI描述它们之间的关系，那么让我们开始吧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SwiftUI" scheme="http://www.iosprogrammer.tech/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>一文解决UIKeyboard的疑难杂症</title>
    <link href="http://www.iosprogrammer.tech/UIScrollView-Keyboard/"/>
    <id>http://www.iosprogrammer.tech/UIScrollView-Keyboard/</id>
    <published>2021-01-30T02:58:39.000Z</published>
    <updated>2021-02-25T06:53:41.437Z</updated>
    
    <content type="html"><![CDATA[<p>我们在iOS的开发过程中，经常要在包含UIScrollView的view中监听键盘的通知，有时候会出现一些bug，比方说<code>UIKeyboardWillShowNotification</code>可能会调用多次。</p><p>通过这篇文章我们来讨论几个经常出现的问题，并且了解一下对应的解决方案。</p><a id="more"></a><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。回复“博客”免费获取各大互联网公司面试题。</p></div><p><img src="../../images/first/UIkeyBoard.jpg" alt="UIkeyboard的bugs"></p><h1 id="UIScrollView退出键盘"><a href="#UIScrollView退出键盘" class="headerlink" title="UIScrollView退出键盘"></a>UIScrollView退出键盘</h1><p>拖动UIScrollView退出键盘的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, UIScrollViewKeyboardDismissMode) &#123;</span><br><span class="line">    UIScrollViewKeyboardDismissModeNone,</span><br><span class="line">    UIScrollViewKeyboardDismissModeOnDrag,      &#x2F;&#x2F; dismisses the keyboard when a drag begins</span><br><span class="line">    UIScrollViewKeyboardDismissModeInteractive, &#x2F;&#x2F; the keyboard follows the dragging touch off screen, and may be pulled upward again to cancel the dismiss</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@property(nonatomic) UIScrollViewKeyboardDismissMode keyboardDismissMode &#x2F;&#x2F; 默认是None，UIScrollView和Keyboar不会有任何交互效果</span><br></pre></td></tr></table></figure><ul><li><code>UIScrollViewKeyboardDismissModeOnDrag</code> 当开始拖动时，keyboard会退出屏幕。在iOS14的模拟器上动画有点不流畅。</li><li><code>UIScrollViewKeyboardDismissModeInteractive</code> <strong>当拖动手势进入键盘区域时</strong>，键盘会跟随拖动上升或者下降。</li></ul><h1 id="UIKeyboardWillShowNotification多次重复通知"><a href="#UIKeyboardWillShowNotification多次重复通知" class="headerlink" title="UIKeyboardWillShowNotification多次重复通知"></a><code>UIKeyboardWillShowNotification</code>多次重复通知</h1><p>多个TextField或者TextView之间切换时，<code>UIKeyboardWillShowNotification</code>、<code>UIKeyboardWillChangeFrameNotification</code>每次都会调用（但是<code>UIKeyboardWillHideNotification</code>却不会调用），当你使用上面提到的<code>UIScrollViewKeyboardDismissModeInteractive</code>时，通知甚至会在一个动画过程中频繁调用。</p><p>我们在处理一些业务逻辑的时候需要谨记这个特点，不要寄希望于只会调用一次。比方说要在<code>UIKeyboardWillShowNotification</code>的回调中把某个视图上移。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(willShow:) name:UIKeyboardWillShowNotification object:nil]; &#x2F;&#x2F; 订阅通知</span><br><span class="line"></span><br><span class="line">❌</span><br><span class="line">- (void)willShow:(NSNotification *)noti &#123;</span><br><span class="line">    NSLog(@&quot;willShow&quot;);</span><br><span class="line">    CGRect keyboarFrame &#x3D; [noti.userInfo[UIKeyboardFrameBeginUserInfoKey] CGRectValue];</span><br><span class="line">    CGRect bottomViewFrame &#x3D; _bottomView.frame;</span><br><span class="line">    bottomViewFrame.origin.y -&#x3D; keyboarFrame.size.height;</span><br><span class="line">    _bottomView.frame &#x3D; bottomViewFrame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">✅</span><br><span class="line">&#x2F;&#x2F; 使用固定高度的方法</span><br><span class="line">- (void)willShow:(NSNotification *)noti &#123;</span><br><span class="line">    NSLog(@&quot;willShow&quot;);</span><br><span class="line">    CGRect keyboarFrame &#x3D; [noti.userInfo[UIKeyboardFrameEndUserInfoKey] CGRectValue];</span><br><span class="line">    CGRect bottomViewFrame &#x3D; _bottomView.frame;</span><br><span class="line">    bottomViewFrame.origin.y &#x3D; self.view.bounds.size.height - keyboarFrame.size.height - _bottomView.bounds.size.height;</span><br><span class="line">    _bottomView.frame &#x3D; bottomViewFrame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">✅</span><br><span class="line">&#x2F;&#x2F; 使用全局变量的方法</span><br><span class="line">[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(didHide:) name:UIKeyboardDidHideNotification object:nil]; &#x2F;&#x2F; 订阅键盘消失的通知</span><br><span class="line"></span><br><span class="line">static BOOL keyboarShow &#x3D; NO;</span><br><span class="line"></span><br><span class="line">- (void)willShow:(NSNotification *)noti &#123;</span><br><span class="line">    NSLog(@&quot;willShow&quot;);</span><br><span class="line">    if (keyboarShow &#x3D;&#x3D; YES) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    keyboarShow &#x3D; YES;</span><br><span class="line">    CGRect keyboarFrame &#x3D; [noti.userInfo[UIKeyboardFrameEndUserInfoKey] CGRectValue];</span><br><span class="line">    CGRect bottomViewFrame &#x3D; _bottomView.frame;</span><br><span class="line">    bottomViewFrame.origin.y &#x3D; self.view.bounds.size.height - keyboarFrame.size.height - _bottomView.bounds.size.height;</span><br><span class="line">    _bottomView.frame &#x3D; bottomViewFrame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)didHide:(NSNotification *)noti &#123;</span><br><span class="line">    NSLog(@&quot;didHide&quot;);</span><br><span class="line">    keyboarShow &#x3D; NO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="点击UIScrollView触发UIKeyboardWillShowNotification通知"><a href="#点击UIScrollView触发UIKeyboardWillShowNotification通知" class="headerlink" title="点击UIScrollView触发UIKeyboardWillShowNotification通知"></a>点击UIScrollView触发<code>UIKeyboardWillShowNotification</code>通知</h1><p>点击TextFiled或者TextView后，再点击UIScrollView，<code>UIKeyboardWillShowNotification</code>的回调会被触发，我不能确定造成这个现象的原因是什么，不过猜测是因为iOS的事件管理系统的内部bug导致的。解决这个问题的终极方法和我们上面⬆️用的方法是一样的。</p><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。回复“博客”免费获取各大互联网公司面试题。</p></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过这篇文章我们讨论了在使用<code>UIScrollView</code>的时候会出现的一些关于键盘的问题，并且给出了具体的解决方案，以及用到了UIKeybaord的一些通知，希望对你有所帮助。</p><p>如果你有任何的问题、建议都可以通过<a href="https://weibo.com/7414691003/profile">微博</a>或<a href="mailto:shizhiang@126.com">邮件</a>联系到我本人。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们在iOS的开发过程中，经常要在包含UIScrollView的view中监听键盘的通知，有时候会出现一些bug，比方说&lt;code&gt;UIKeyboardWillShowNotification&lt;/code&gt;可能会调用多次。&lt;/p&gt;
&lt;p&gt;通过这篇文章我们来讨论几个经常出现的问题，并且了解一下对应的解决方案。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="http://www.iosprogrammer.tech/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>在SwiftUI中使用ForEach和List模仿UITableView、UICollectionView</title>
    <link href="http://www.iosprogrammer.tech/swiftui/what-is-the-different-between-foreach-and-list/"/>
    <id>http://www.iosprogrammer.tech/swiftui/what-is-the-different-between-foreach-and-list/</id>
    <published>2021-01-26T05:54:47.000Z</published>
    <updated>2021-02-25T06:53:41.438Z</updated>
    
    <content type="html"><![CDATA[<p>ForEach和List都可以创建列表，它们都是SwiftUI重要的组件，它们用来替代UIKit中的UITableView。通过这篇文章我们将学习到ForEach和List的相关用法。</p><p>这篇文章非常适合SwiftUI入门的同学。</p><a id="more"></a><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。回复“博客”免费获取各大互联网公司面试题。</p></div><p><img src="../../images/swiftui-list/blog-main-picture.png"></p><h2 id="List的用法"><a href="#List的用法" class="headerlink" title="List的用法"></a>List的用法</h2><p>首先来看一下<code>List</code>。List最简单的用法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">0</span><span class="operator">..&gt;</span><span class="number">10</span>) &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hellow, SwiftUI&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样只是简单的把一个文字迭代了10遍组成一个列表。下面假设有一个学生数组，数组是由20个字典组成，每个字典包含学生的id和姓名两个元素。</p><p><img src="../../images/swiftui-list/2.png" alt="SwiftUI List用法"></p><p>让我们来看一下<code>List</code>的创建方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>(students, id: \.id) &#123; student <span class="keyword">in</span></span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;student id:<span class="subst">\(student.id)</span> name:<span class="subst">\(student.name)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>List的初始化用到了3个参数：</p><ol><li>一个未命名的<code>data</code>，被迭代的数组。这里我们用的是<code>students</code>。</li><li>keypath类型的<code>id</code>参数，用来唯一区分当前迭代到的元素是数组中的哪一个。</li><li>最后一个参数是一个闭包，每一次迭代都会把闭包中的view组成一个新的view。因为这是最后一个参数，所以可以使用尾随闭包。</li></ol><h2 id="ForEach的用法"><a href="#ForEach的用法" class="headerlink" title="ForEach的用法"></a>ForEach的用法</h2><p><code>ForEach</code>和<code>List</code>一样都可以进行数组迭代来创建列表，把上面的例子用ForEach实现。</p><p><img src="../../images/swiftui-list/3.png" alt="SwiftUI ForEach用法"></p><p><code>ForEach</code>的参数和<code>List</code>几乎一样，这里不再赘述。</p><h2 id="List和ForEach的不同"><a href="#List和ForEach的不同" class="headerlink" title="List和ForEach的不同"></a>List和ForEach的不同</h2><p>从上图可以看出ForEach和List的语法非常的相似，不过ForEach在<em>Preview</em>中展示的效果却分成了好多个屏幕。</p><p>这个效果其实和下面的代码是一样的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> students: [<span class="type">Student</span>]</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Student id:0 name:aaa&quot;</span>)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Student id:0 name:aaa&quot;</span>)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Student id:0 name:aaa&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以会是这样，是因为ForEach并不会生成一个容器来包装闭包里面的View，而List却正好相反，并且<strong>ForEach的列表是不能滚动的</strong>，也就是说当里面的view超出了ForEach的父视图的大小是不能滚动的。这也是咱们在使用List和ForEach的时候需要注意的点。</p><h2 id="List和ForEach的适用场景"><a href="#List和ForEach的适用场景" class="headerlink" title="List和ForEach的适用场景"></a>List和ForEach的适用场景</h2><p>因为List会默认生成一个容器来包装它里面的子view，所以它更适合单独使用来创建一个可以支持纵向滚动的列表，就像咱们上面的用法。</p><p>而ForEach不会生成一个容器，而且不能支持滚动，所以一般把它嵌套在其他容器里面使用。</p><h3 id="List嵌套ForEach"><a href="#List嵌套ForEach" class="headerlink" title="List嵌套ForEach"></a>List嵌套ForEach</h3><p>嵌套在<code>List</code>里面可以实现类似带header的UITableView的效果，这里同时展示了固定不动的Header和跟随滚动的Header。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> students: [<span class="type">Student</span>]</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;这是固定不动的Header&quot;</span>)</span><br><span class="line">            <span class="type">List</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;这是跟随滚动的Header&quot;</span>)</span><br><span class="line">                <span class="type">ForEach</span>(students, id: \.id) &#123; stu <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;student id:<span class="subst">\(stu.id)</span> name: <span class="subst">\(stu.name)</span>&quot;</span>).frame(width: <span class="number">200</span>, height: <span class="number">60</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                .onDelete&#123; indexSet <span class="keyword">in</span></span><br><span class="line">                    <span class="keyword">for</span> index <span class="keyword">in</span> indexSet &#123;</span><br><span class="line">                        students.remove(at: index)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;这是跟随滚动Footer&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;这是固定不动的Footer&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../../images/swiftui-list/4.png" alt="SwiftUI ForEach用法"></p><p>这里面有两点需要注意：</p><ol><li><code>@State</code> 通过添加<a href="./swiftui-concept-essential">数据绑定</a>使view的改变和数据联系起来，如果不添加这个会报错 <mark class="label danger">Cannot use mutating member on immutable value: self is immutable</mark></li><li><code>.onDelete</code> 添加了这个<a href="./swiftui-concept-essential">modifire</a>后出现左滑删除的效果</li></ol><h3 id="ScrollView嵌套ForEach"><a href="#ScrollView嵌套ForEach" class="headerlink" title="ScrollView嵌套ForEach"></a>ScrollView嵌套ForEach</h3><p>用横向滚动的<code>ScrollView</code>嵌套<code>ForEach</code>可以实现类似UIKit中横向滚动的<code>UICollectionView</code>。</p><p><img src="../../images/swiftui-list/5.png" alt="SwiftUI ForEach用法"></p><h3 id="Section嵌套ForEach"><a href="#Section嵌套ForEach" class="headerlink" title="Section嵌套ForEach"></a>Section嵌套ForEach</h3><p>使用List、Section、ForEach嵌套来实现类似于UITableView的分组效果。</p><p>还是使用上面的学生例子，现在我们来给学生分班。先来创建两个班级：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">StuCls</span>: <span class="title">String</span>, <span class="title">CaseIterable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">ClsOne</span> <span class="operator">=</span> <span class="string">&quot;一班&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">ClsTwo</span> <span class="operator">=</span> <span class="string">&quot;二班&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把学生划分到班级里面</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>: <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> classId: <span class="type">StuCls</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来创建几个分好班的学生：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> std1 <span class="operator">=</span> <span class="type">Student</span>(id: <span class="number">0</span>, name: <span class="string">&quot;学生1&quot;</span>, classId: <span class="type">StuCls</span>.<span class="type">ClsOne</span>)</span><br><span class="line"><span class="keyword">let</span> std2 <span class="operator">=</span> <span class="type">Student</span>(id: <span class="number">1</span>, name: <span class="string">&quot;学生2&quot;</span>, classId: <span class="type">StuCls</span>.<span class="type">ClsOne</span>)</span><br><span class="line"><span class="keyword">let</span> std3 <span class="operator">=</span> <span class="type">Student</span>(id: <span class="number">2</span>, name: <span class="string">&quot;学生3&quot;</span>, classId: <span class="type">StuCls</span>.<span class="type">ClsOne</span>)</span><br><span class="line"><span class="keyword">let</span> std4 <span class="operator">=</span> <span class="type">Student</span>(id: <span class="number">2</span>, name: <span class="string">&quot;学生4&quot;</span>, classId: <span class="type">StuCls</span>.<span class="type">ClsTwo</span>)</span><br><span class="line"><span class="keyword">let</span> std5 <span class="operator">=</span> <span class="type">Student</span>(id: <span class="number">2</span>, name: <span class="string">&quot;学生5&quot;</span>, classId: <span class="type">StuCls</span>.<span class="type">ClsTwo</span>)</span><br><span class="line"><span class="keyword">let</span> std6 <span class="operator">=</span> <span class="type">Student</span>(id: <span class="number">2</span>, name: <span class="string">&quot;学生6&quot;</span>, classId: <span class="type">StuCls</span>.<span class="type">ClsTwo</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> students <span class="operator">=</span> [std1, std2, std3, std4, std5, std6]</span><br></pre></td></tr></table></figure><p>最后，结合List、ForEach和Section创建可以分组的列表</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">    <span class="type">ForEach</span>(<span class="type">StuCls</span>.allCases, id: \.rawValue) &#123; cls <span class="keyword">in</span></span><br><span class="line">        <span class="type">Section</span>(header: <span class="type">Text</span>(cls.rawValue)) &#123;</span><br><span class="line">            <span class="type">ForEach</span>(students.filter &#123; <span class="variable">$0</span>.classId <span class="operator">==</span> cls &#125;, id: \.id) &#123; stu <span class="keyword">in</span></span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;student id:<span class="subst">\(stu.id)</span> name: <span class="subst">\(stu.name)</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../../images/swiftui-list/6.png" alt="SwiftUI ForEach用法"></p><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。回复“博客”免费获取各大互联网公司面试题。</p></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这篇文章中我们学习了SwiftUI中<code>List</code>/<code>ForEach</code>/<code>ScrollView</code>/<code>Section</code>的用法，并利用一个例子详细说明了前两个的不同和使用场景。你应该学到了：</p><ul><li><code>List</code>和<code>ForEach</code>的用法，它们之间的区别和使用场景</li><li>怎么创建一个像UICollectionView一样横向滚动的列表</li><li>类似UITableView的分组列表要怎样实现</li><li>头部固定不动和跟随滚动的列表的实现方案</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;ForEach和List都可以创建列表，它们都是SwiftUI重要的组件，它们用来替代UIKit中的UITableView。通过这篇文章我们将学习到ForEach和List的相关用法。&lt;/p&gt;
&lt;p&gt;这篇文章非常适合SwiftUI入门的同学。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SwiftUI" scheme="http://www.iosprogrammer.tech/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>学习SwiftUI，必须掌握的3个知识点</title>
    <link href="http://www.iosprogrammer.tech/swiftui/swiftui-concept-essential/"/>
    <id>http://www.iosprogrammer.tech/swiftui/swiftui-concept-essential/</id>
    <published>2021-01-23T14:36:39.000Z</published>
    <updated>2021-02-25T06:53:41.437Z</updated>
    
    <content type="html"><![CDATA[<p>在WWDC2019中，iOS引入了一个全新的UI框架——SwiftUI。它的目的是通过全新的设计思想来解决iPhone、iPad、Mac的界面统一，以便开发者可以通过一次学习多处使用（Learn Once, Use anywhere）。从iOS13开始我们就可以使用这个全新的框架了，iOS开发者应该尽快掌握它。</p><a id="more"></a><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。回复“博客”免费获取各大互联网公司面试题。</p></div><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>SwiftUI中一切皆View，不论是我们熟悉的<code>Button</code>还是<code>backgroundColor</code>，甚至<code>Color.red</code>，它们都是<code>View</code>。</p><p>与UIKit中的<code>UIView</code>不同的是，在SwiftUI中<code>View</code>不再是一个类而是一个协议。`</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The type of view representing the body of this view.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// When you create a custom view, Swift infers this type from your</span></span><br><span class="line">    <span class="comment">/// implementation of the required `body` property.</span></span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Body</span> : <span class="type">View</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The content and behavior of the view.</span></span><br><span class="line">    <span class="meta">@ViewBuilder</span> <span class="keyword">var</span> body: <span class="keyword">Self</span>.<span class="type">Body</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SwiftUI中的View是不能直接使用的，否则会报错 <mark class="label danger">'View' cannot be constructed because it has no accessible initializers</mark>，当你遇到这个问题的时候请仔细思考一下你是不是真的要这么用，或许可以用一个其他的代替。</p><p>常用到的<code>View</code>有：<code>Text</code>/<code>Button</code>/<code>Toggle</code>/<code>Picker</code>/<code>V(Z)(H)Stack</code>/<code>Color</code>/<code>Spacer</code>/<code>Image</code>/<code>Shape</code>/<code>Divider</code>以及它们的<code>modifier</code>等。</p><p><code>@ViewBuilder</code>标记的<code>body</code>变量表示它是一个容器，里面可以包含任意多个其他的<code>View</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span>(action: btnClick) &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">Image</span>(systemName: <span class="string">&quot;star&quot;</span>)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Placeholder&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Modifer"><a href="#Modifer" class="headerlink" title="Modifer"></a>Modifer</h2><p>我们分别看一下在UIKit和SwiftUI中修改一个Label的文字颜色</p><div class="tabs" id="modify-label-text-color"><ul class="nav-tabs"><li class="tab active"><a href="#modify-label-text-color-1">UIKit</a></li><li class="tab"><a href="#modify-label-text-color-2">SwiftUI</a></li></ul><div class="tab-content"><div class="tab-pane active" id="modify-label-text-color-1"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> label <span class="operator">=</span> <span class="type">UILabel</span>()</span><br><span class="line">label.text <span class="operator">=</span> <span class="string">&quot;UIKit&quot;</span></span><br><span class="line">label.textColor <span class="operator">=</span> <span class="type">UIColor</span>.red</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="modify-label-text-color-2"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;SwiftUI&quot;</span>).foregroundColor(.red)</span><br></pre></td></tr></table></figure></div></div></div><p>SwiftUI中的<code>.foregroundColor</code>和<code>textColor</code>有本质的不同，它是一种<strong>modifier</strong>，它返回的是令一个View。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@inlinable</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">foregroundColor</span><span class="params">(<span class="keyword">_</span> color: Color?)</span></span> -&gt; <span class="keyword">some</span> <span class="type">View</span></span><br></pre></td></tr></table></figure><p>当我们调用了<code>.foregroundColor</code>其实是创造了一个新的View，这也正是SwiftUI中万物皆View的例子。</p><h2 id="State和-——-Binding-Value"><a href="#State和-——-Binding-Value" class="headerlink" title="@State和$ —— Binding Value"></a>@State和$ —— Binding Value</h2><div class="tabs" id="toggle"><ul class="nav-tabs"><li class="tab active"><a href="#toggle-1">代码</a></li><li class="tab"><a href="#toggle-2">效果图</a></li></ul><div class="tab-content"><div class="tab-pane active" id="toggle-1"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> isOn: <span class="type">Bool</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Toggle</span>(isOn: <span class="variable">$isOn</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Toggle&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="toggle-2"><p><img src="../images/swiftui-concept/1.png" alt="SwiftUI Toggle Binding"></p></div></div></div><blockquote><p>这是一个双向绑定</p></blockquote><p>绑定建立以后，不论是<code>isOn</code>的修改触发了Toggle状态的改变，还是用户点击了Toggle引起<code>isOn</code>变量值的改变我们都不需要关心，SwiftUI会帮我们完成。</p><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。回复“博客”免费获取各大互联网公司面试题。</p></div><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章聊了SwiftUI中最基础最重要的3个概念，如果你有任何的问题、建议都可以通过<a href="https://weibo.com/7414691003/profile">微博</a>或<a href="mailto:shizhiang@126.com">邮件</a>联系到我本人。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在WWDC2019中，iOS引入了一个全新的UI框架——SwiftUI。它的目的是通过全新的设计思想来解决iPhone、iPad、Mac的界面统一，以便开发者可以通过一次学习多处使用（Learn Once, Use anywhere）。从iOS13开始我们就可以使用这个全新的框架了，iOS开发者应该尽快掌握它。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SwiftUI" scheme="http://www.iosprogrammer.tech/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>最佳实践：iOS开发在xib/storyboard中自定义view</title>
    <link href="http://www.iosprogrammer.tech/how-to-make-view-get-intrinsic-content-size/"/>
    <id>http://www.iosprogrammer.tech/how-to-make-view-get-intrinsic-content-size/</id>
    <published>2021-01-14T06:21:41.000Z</published>
    <updated>2021-02-25T06:53:41.438Z</updated>
    
    <content type="html"><![CDATA[<p>在xib或者storyboard嵌套另一个用xib布局的view是一个经常用到的技术点，要完全掌握好这个知识点不是那么容易，用常规的xib创建view的方法通常并不能满足我们的需求。</p><p>当我们使用Autolayout自动布局时，在xib中嵌套一个自定义的view可能就更麻烦了。通过这篇文章你将学习到嵌套xib布局的方法和怎么在xib中使用autolayout的一些高级用法来使view向label一样具有contrisic content size。</p><a id="more"></a><h3 id="从xib加载自定义view视图"><a href="#从xib加载自定义view视图" class="headerlink" title="从xib加载自定义view视图"></a>从xib加载自定义view视图</h3><p>新建项目:</p><img src="../images/xib-view/xib-1.png" style="height:300px"/><p>添加view和xib到项目中：</p><img src="../images/xib-view/xib-4.png" style="height:300px" alt="点击查看大图"/><img src="../images/xib-view/xib-2.png" style="height:300px"/><img src="../images/xib-view/xib-3.png" style="height:300px"/><p>设置xib的大小为freedom，并设置xib的大小为 200x100</p><img src="../images/xib-view/xib-6.png" style="height:300px"/><img src="../images/xib-view/xib-7.png" style="height:300px"/><p><strong>设置xib的 Fils’s Owner 为CustomView，不要设置view的class</strong></p><img src="../images/xib-view/xib-5.png"/><h3 id="xib文件中添加view并设置约束"><a href="#xib文件中添加view并设置约束" class="headerlink" title="xib文件中添加view并设置约束"></a>xib文件中添加view并设置约束</h3><img src="../images/xib-view/xib-8.png" style="height:300px"/><p>设置约束后的xib是这样：</p><img src="../images/xib-view/xib-15.png" style="height:300px"/><h3 id="xib和-m建立链接"><a href="#xib和-m建立链接" class="headerlink" title=".xib和.m建立链接"></a>.xib和.m建立链接</h3><img src="../images/xib-view/xib-13.png"/><h3 id="重写initWithCoder-方法把xib中的view添加进来"><a href="#重写initWithCoder-方法把xib中的view添加进来" class="headerlink" title="重写initWithCoder:方法把xib中的view添加进来"></a>重写<code>initWithCoder:</code>方法把xib中的view添加进来</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (instancetype)initWithCoder:(NSCoder *)coder</span><br><span class="line">&#123;</span><br><span class="line">    self &#x3D; [super initWithCoder:coder];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        &#x2F;&#x2F; 加载xib，注意owner: self</span><br><span class="line">        [[NSBundle mainBundle] loadNibNamed:NSStringFromClass([self class]) owner:self options:nil];</span><br><span class="line">        self.contentView.frame &#x3D; self.bounds;</span><br><span class="line">        [self addSubview:self.contentView];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在Main-storyboard中添加CustomView，并设置约束"><a href="#在Main-storyboard中添加CustomView，并设置约束" class="headerlink" title="在Main.storyboard中添加CustomView，并设置约束"></a>在Main.storyboard中添加CustomView，并设置约束</h3><img src="../images/xib-view/xib-9.png"/><img src="../images/xib-view/xib-10.png"  style="height:300px"/><p>这时候会报错，因为view的约束不足。</p><img src="../images/xib-view/xib-11.png"  style="height:300px"/><h3 id="让UIView像UILabel一样拥有IntrinsicContentSize"><a href="#让UIView像UILabel一样拥有IntrinsicContentSize" class="headerlink" title="让UIView像UILabel一样拥有IntrinsicContentSize"></a>让UIView像UILabel一样拥有IntrinsicContentSize</h3><p>在UIKit中有一些视图具有intrinsicContentSize，比如UILabel、UIButotn、UIImageView等。这类视图可以根据自身的内容确定大小，在设置约束时只需要确定位置（x/y）就可以了。</p><p>但是UIView本身是不具备这个特性的，不过我们可以通过在xib或者storyboard中<strong>设置intrinsicSize来告诉编译器当前的视图是可以确定自身大小的</strong>。</p><img src="../images/xib-view/xib-12.png"  style="height:300px"/><p>这样设置以后约束不足的警告就没有了。</p><img src="../images/xib-view/xib-16.png"  style="height:300px"/><p>最终，view controller中customView的展示就是.xib中的样子了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过这篇文章我们可以学到：</p><ul><li>xib自定义view的方法</li><li>让UIView像UILabel一样拥有IntrinsicContentSize的方法</li><li>xib嵌套使用的方法</li></ul><p><strong>想了解更多内容关注公众号【iOS开发栈】。</strong></p><hr><ul><li><a href="http://www.iosprogrammer.tech/WebSocket-And-SocketRocket-Source-Analysis/">WebSocket简介和SocketRocket源码分析</a></li><li><a href="http://www.iosprogrammer.tech/UIStackView-Advanced-Knowledge/">UIStackView的正确使用姿势（最新最全、配视频教程）</a></li><li><a href="http://www.iosprogrammer.tech/Using-Instruments-To-Oprimize-CPU-Performance/">使用Instruments工具测试CPU与常见对CPU占用过高的操作</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;在xib或者storyboard嵌套另一个用xib布局的view是一个经常用到的技术点，要完全掌握好这个知识点不是那么容易，用常规的xib创建view的方法通常并不能满足我们的需求。&lt;/p&gt;
&lt;p&gt;当我们使用Autolayout自动布局时，在xib中嵌套一个自定义的view可能就更麻烦了。通过这篇文章你将学习到嵌套xib布局的方法和怎么在xib中使用autolayout的一些高级用法来使view向label一样具有contrisic content size。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="http://www.iosprogrammer.tech/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>什么是Content Hugging Priorities/Content Compression Resistance Priorities</title>
    <link href="http://www.iosprogrammer.tech/What-is-Content-Hugging-Priorities-Content-Compression-Resistance-Priorities/"/>
    <id>http://www.iosprogrammer.tech/What-is-Content-Hugging-Priorities-Content-Compression-Resistance-Priorities/</id>
    <published>2021-01-06T07:00:19.000Z</published>
    <updated>2021-01-26T03:43:17.417Z</updated>
    
    <content type="html"><![CDATA[<p>这两个优先级属性都是用在iOS开发时Auto Layout布局中的。</p><a id="more"></a><h3 id="Content-Hugging-Priorities"><a href="#Content-Hugging-Priorities" class="headerlink" title="Content Hugging Priorities"></a>Content Hugging Priorities</h3><p><strong>Content Hugging Priorities：在Auto Layout中，当子视图不足以填充满空间时，优先满足此属性值较大的子视图的内容展示，而拉伸属性值较低的子视图。</strong></p><p>假设有这样一种情况，两个水平排列的UILabel中分别显示“斜杠程序员”和“<a href="http://www.iosprogrammer.tech“,给它们加上5个约束,其中2、3、5是水平约束,假设这3个水平约束的值都是10/">www.iosprogrammer.tech“，给它们加上5个约束，其中2、3、5是水平约束，假设这3个水平约束的值都是10</a>.</p><p>现在两个UILabel里面文字内容所占大小加上3个水平约束的值仍然小于（&lt;）父视图的宽度。此时会发现storyboard中有报错，但是我们仍然可以正常运行项目并看到展示结果。<br><img src="../images/hugging-prority-1.png"><br><img src="../images/hugging-prority-2.png"><br><img src="../images/hugging-prority-3.png"></p><p>我们可以看到“<a href="http://www.iosprogrammer.tech“所在label所占的空间变大了.此时设置这个label的content/">www.iosprogrammer.tech“所在label所占的空间变大了。此时设置这个label的Content</a> Hugging Priorities为750。</p><p><img src="../images/hugging-prority-4.png"><br><img src="../images/hugging-prority-5.png"></p><p>“<a href="http://www.iosprogrammer.tech“所在label刚好满足展示内容,而“斜杠程序员”所在label所占空间变大了./">www.iosprogrammer.tech“所在label刚好满足展示内容，而“斜杠程序员”所在label所占空间变大了。</a></p><p>这也就是Content Hugging Priorities的作用，控制当内容不足以填充满空间时，优先满足此属性值较大的子view的内容展示，而拉伸属性值较低的子view。</p><h3 id="Content-Compression-Resistance-Priorities"><a href="#Content-Compression-Resistance-Priorities" class="headerlink" title="Content Compression Resistance Priorities"></a>Content Compression Resistance Priorities</h3><p><strong>Content Compression Resistance Priorities：在Auto Layout中，当子视图所需的内容超出父视图的空间时，优先展示此值较大的子视图，而省略压缩此值较小的子视图。</strong></p><p>假设有这样一种情况，两个水平排列的UILabel中分别显示“斜杠程序员专注于提高编程能力”和“斜杠程序员的官方网站是<a href="http://www.iosprogrammer.tech“,给它们加上5个约束,其中2、3、5是水平约束,假设这3个水平约束的值都是10/">www.iosprogrammer.tech“，给它们加上5个约束，其中2、3、5是水平约束，假设这3个水平约束的值都是10</a>.</p><p>现在两个UILabel里面文字内容所占大小超过了父视图的宽度。此时会发现storyboard中有报错，但是我们仍然可以正常运行项目并看到展示结果。<br><img src="../images/hugging-prority-6.png"><br><img src="../images/hugging-prority-7.png"><br><img src="../images/hugging-prority-8.png"></p><p>第一个Label被压缩了，里面的文字被省略了；第二个label正常展示了出来。此时我们把第一个label的Content Compression Resistance Priorities设置到大于第二个label。</p><p><img src="../images/hugging-prority-9.png"><br><img src="../images/hugging-prority-10.png"></p><p>可以看到第二个label被压缩了，第一个label正常展示了出来。</p><p><strong>Content Compression Resistance Priorities：在Auto Layout中，当子视图所需的内容超出父视图的空间时，优先展示此值较大的子视图，而省略压缩此值较小的子视图。</strong></p><p><a href="https://medium.com/@dineshk1389/content-hugging-and-compression-resistance-in-ios-35a0e8f19118">参考文章</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这两个优先级属性都是用在iOS开发时Auto Layout布局中的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="http://www.iosprogrammer.tech/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>UIStackView的正确使用姿势（最新最全、配视频教程）</title>
    <link href="http://www.iosprogrammer.tech/UIStackView-Advanced-Knowledge/"/>
    <id>http://www.iosprogrammer.tech/UIStackView-Advanced-Knowledge/</id>
    <published>2021-01-01T08:28:23.000Z</published>
    <updated>2021-03-13T05:51:12.731Z</updated>
    
    <content type="html"><![CDATA[<p>UIStackView在iOS9之后开始使用，继承自UIView，用来管理在它内部的views，<text style="color:#1E90FF">但是并不会被渲染出来</text>，经过我在工作中的使用总结，它确实可以很大程度提高界面开发效率，每一个iOS开发者都应该熟练掌握UIStackView的使用。</p><a id="more"></a><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。回复“博客”免费获取各大互联网公司面试题。</p></div><p>本文将分为基础和进阶两部分来讲解UIStackView，因此如果已经一定程度的使用过UIStackView，那么可以直接跳转到进阶部分。</p><h3 id="UIStackView基础入门知识"><a href="#UIStackView基础入门知识" class="headerlink" title="UIStackView基础入门知识"></a>UIStackView基础入门知识</h3><p>UIStackview的主要作用是管理<code>arrangedSubviews</code>数组中的view的布局，管理数组的有三个方法<br>    - addArrangedSubview:<br>    - removeArrangedSubview:<br>    - insertArrangedSubview:atIndex:</p><p>UIStackView中arrangedSubview的布局主要是使用<code>UILayoutConstraintAxis</code> <code>UIStackViewDistribution</code> <code>UIStackViewAlignment</code> <code>spacing</code> 几个属性。</p><ol><li><p><code>UILayoutConstraintAxis</code> - 确定arrangedSubviews的排列方向，分为Horizontal和Vertical</p></li><li><p><code>UIStackViewDistribution</code> - arrangedSubviews<strong>在排列方向</strong>的布局方式</p><ol><li>UIStackViewDistributionFill 把UIStackView的空间填充满，对于有intrinsic content size的UIView（UILabel、UIButton、UIImageView、UIControl）需要通过设置Size Inspector中的<a href="https://www.iosprogrammer.tech/What-is-Content-Hugging-Priorities-Content-Compression-Resistance-Priorities/">Content Hugging Property</a>来决定优先满足哪个view的contrinsicSize，如果property相同则会默认选择第一个。</li><li>UIStackViewDistributionFillEqually arrangedSubviews平分UIStackView 排列方向上除了spacing的空间</li><li>UIStackViewDistributionFillProportionally 按比例分配每个arrangedSubview所占大小，按照每个arrangedSubview的intrinsic content size的比例</li><li>UIStackViewDistributionEqualSpacing 当arrangedSubviews不能填满时，空白区域会平均分配，而不会自动拉伸Hugging Property较低的view；如果arrangedSubviews放不开时，会优先保证<a href="https://www.iosprogrammer.tech/What-is-Content-Hugging-Priorities-Content-Compression-Resistance-Priorities/">compression resistance priority</a>较高的view内容能够完全展示，priority相同时会默认保证第一个view。</li><li>UIStackViewDistributionEqualCentering view中心之间的spacing相等。当spacing值过大，无法满足所有view都能正常展示，会优先保证compression resistance priority较高的view内容能够完全展示，priority相同时会默认保证第一个view。</li></ol></li><li><p>UIStackViewAlignment - arrangedSubviews<strong>垂直于排列方向</strong>的布局方式</p><ol><li>UIStackViewAlignmentFill 完全填充</li><li>UIStackViewAlignmentLeading/UIStackViewAlignmentTop 靠上/右</li><li>UIStackViewAlignmentTrailing/UIStackViewAlignmentBottom 靠下/左</li><li>UIStackViewAlignmentFirstBaseline/UIStackViewAlignmentLastBaseline 文字基线 下/上</li></ol></li><li><p>spacing - arrangedSubview的间距。对于<code>UIStackViewDistributionFillxxx</code>就是准确的距离，对于UIStackViewDistributionEqualSpacing、UIStackViewDistributionEqualCentering 是最小距离，<strong>使用负数view会覆盖</strong></p></li></ol><p>掌握了上面的基础知识后基本就可以上手使用UIStackView了。</p><h3 id="UIStackView进阶知识"><a href="#UIStackView进阶知识" class="headerlink" title="UIStackView进阶知识"></a>UIStackView进阶知识</h3><p>Q1. 在UIStackView中可以对子view使用约束吗？<br>A1. UIStackView是基于约束来确定里面arrangedSubview的布局的，手动给某一个arrangedSubview指定约束时，会优先满足指定的约束，不过因为系统也会根据我们设置的属性添加约束，所以要当心会出现约束冲突。</p><p>Q2. UIStackView.arrangedViews 和 UIStackView.subViews的关系？<br>A2. arragedViews是subViews的子集 </p><ol><li>UIStackView addSubview 并不会添加到arrangedSubviews中；</li><li>当向arrangedSubviews中添加view时会自动添加到subviews中 </li><li>把一个只在subview而不在arrangedview中的view移除时也不会影响到arrangedview </li><li>一个view既在subviews中又在arrangedviews中时，当把它从subviews中移除，也会自动从arragedviews中移除，反之则不然</li></ol><p>Q3. UIStackView设置了背景色为什么显示不出来？<br>A3. UIStackView虽然是UIView的子类，但是它并不会被渲染，所以设置背景色并没有什么显示，但是设置圆角是有作用的。</p><p>Q4. UIStackView怎么设置某一个子view和后面view的距离？<br>A4. 在iOS11之后UIStackView新加了方法可以设置<code>setCustomSpacing:afterView</code></p><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。回复“博客”免费获取各大互联网公司面试题。</p></div><iframe src="//player.bilibili.com/player.html?bvid=BV1wz4y1674t&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="300px"> </iframe>]]></content>
    
    
    <summary type="html">&lt;p&gt;UIStackView在iOS9之后开始使用，继承自UIView，用来管理在它内部的views，&lt;text style=&quot;color:#1E90FF&quot;&gt;但是并不会被渲染出来&lt;/text&gt;，经过我在工作中的使用总结，它确实可以很大程度提高界面开发效率，每一个iOS开发者都应该熟练掌握UIStackView的使用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="http://www.iosprogrammer.tech/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发xib和代码设置颜色不同的解决方法及其原理（深度好文）</title>
    <link href="http://www.iosprogrammer.tech/xib-color-different-with-hard-code/"/>
    <id>http://www.iosprogrammer.tech/xib-color-different-with-hard-code/</id>
    <published>2020-12-18T03:40:37.000Z</published>
    <updated>2021-02-25T06:53:41.438Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要包括两部分，其一是解决xib设置颜色有偏差的问题，其二是聊一下颜色的一些基础知识。</p><a id="more"></a><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。回复“博客”免费获取各大互联网公司面试题。</p></div><h2 id="xib和代码设置颜色有偏差的原因"><a href="#xib和代码设置颜色有偏差的原因" class="headerlink" title="xib和代码设置颜色有偏差的原因"></a>xib和代码设置颜色有偏差的原因</h2><p>在开发iOS app的过程中我们都是按照设计同学给出的标注来做的，而UI同学在作图时使用到的工具就会有“<strong>颜色配置文件（Color Profile）</strong>”。（下面有颜色配置文件的说明）</p><p><img src="../images/ps-color-profile.png" alt="PS中的颜色配置文件"></p><p>从上图可以看出，ps默认的颜色配置文件是sRGB，因此设计给我们的图都是以sRGB为准的。</p><p>但是在Xcode的ib相关文件中设置颜色时，默认的颜色配置文件是Generic RGB的。</p><p><img src="../images/xcode-xib-colors.png" alt="Xcode-colors"></p><p>因此，如果我们直接按照sRGB标的色值在Generic RGB的配置下进行设置就会出现色差了。</p><p>通过下面的GIF可以更直观的看到这种差异</p><p><img src="../images/record.gif"></p><p>而代码设置颜色时默认是采用的和photoshop一样的sRGB，也是和xib的Generic RGB不相同的，所以代码设置的颜色和UI同学提供的是一样的，而xib中是和他们两个不一样的。</p><h2 id="xib设置颜色和代码有差异的问题解决方案"><a href="#xib设置颜色和代码有差异的问题解决方案" class="headerlink" title="xib设置颜色和代码有差异的问题解决方案"></a>xib设置颜色和代码有差异的问题解决方案</h2><p>解决方案有两种，一种是把sRGB的色值转化成Generic RGB之后再进行设置，另一种是把配置改成sRGB的再进行设置。</p><p>这里用到的不同颜色配置之间进行转换的工具可以用mac自带的ColorSync Utility</p><center class="half" style="display:flex;margin-left:10%">    <img src="../images/colorsyncutilityicon.png" width="200"/><img src="../images/colorsyncinterface.png" width="300"/></center><h2 id="xib和代码设置的颜色有差异的原理分析"><a href="#xib和代码设置的颜色有差异的原理分析" class="headerlink" title="xib和代码设置的颜色有差异的原理分析"></a>xib和代码设置的颜色有差异的原理分析</h2><p>上面说到了xib默认的颜色配置和ps、代码都是不同的，说到颜色配置（Color Profile）就不得不说颜色模型（Color Model）和颜色空间（Color Space）。</p><p>众所周知，计算机、摄像机、打印机等数字设备中只能认识0和1（不然它们也不会叫数字设备了🐶），因此为了把自然界中的五颜六色在数字设备中展示出来，<strong>颜色转换成数字的算法（公式）—— 颜色模型</strong> 就出现了。</p><p>现在被广泛使用的颜色模型有RGB、CMYK、CIELAB等，其中RGB主要用在摄像机、显示器等领域，CMYK主要用在打印机领域，具体内容可以查看<a href="https://www.dpbestflow.org/color/color-space-and-color-profiles">这篇文章</a></p><p>有了算法，就要有<strong>颜色模型具体的算法实现——颜色空间</strong>。之所以叫空间是因为每一个具体的颜色空间都有一个范围</p><p><img src="../image/../images/v2-374053ce809551b3eeef09046f48b074_1440w.jpg"></p><p>正如上图所示，颜色空间都是有不同的范围的，而不同范围的颜色空间进行转换的时候就会有损失，也就会造成<a href="https://zhuanlan.zhihu.com/p/72530732">色差</a>。</p><p><img src="../images/v2-53ebd97b57e169f8b395766d580a1ea9_1440w.jpg"></p><p>颜色模型可以理解为一个概念、理论，颜色空间是对颜色模型的一次具象描述，但是它还不能被计算机所理解。<strong>颜色配置正是能够直接被数字设备拿来用的具体文件</strong>。</p><p>在Mac电脑的ColorSync Utility应用中可以看到下面这些颜色配置</p><p><img src="../images/colorsyncprofiles.png"></p><div class="note info"><p>到公众号【iOS开发栈】学习更多SwiftUI、iOS开发相关内容。回复“博客”免费获取各大互联网公司面试题。</p></div><p>至此，我们把xib和代码设置颜色有偏差的现象彻底解决了，总结一句话就是：</p><blockquote><p>不同的颜色配置之间转换时会造成色差，而代码和xib进行颜色设置时使用了不同的颜色配置文件，才最终导致了同样的色值的最终表现不同。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要包括两部分，其一是解决xib设置颜色有偏差的问题，其二是聊一下颜色的一些基础知识。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="http://www.iosprogrammer.tech/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>OC编程基础</title>
    <link href="http://www.iosprogrammer.tech/Programming-With-ObjC/"/>
    <id>http://www.iosprogrammer.tech/Programming-With-ObjC/</id>
    <published>2018-11-06T03:02:17.000Z</published>
    <updated>2021-01-26T03:44:14.352Z</updated>
    
    <content type="html"><![CDATA[<p>OC编程基础</p><a id="more"></a><ul><li><code>+ (id)alloc</code>方法返回类型是<code>id</code>。这是Objective-C中的一个特殊的关键字，意味着“某种对象”。它是一个指向一个对象的指针（NSObject *），但它的特殊之处在于它不使用星号。</li><li><code>alloc</code>方法的另一个重要任务是通过把对象属性设置为0来清理为对象属性申请的内存。这避免了以前存储的包含垃圾内存的常见问题，但不足以完全初始化对象</li><li><code>- (id)init</code>方法也返回<code>id</code>。该方法被类用来确保它的属性在创建时具有合适的初始值。</li><li>创建对象时一定要把<code>alloc</code>嵌套在<code>init</code>中，就像<code>NSObject *newObject = [[NSObject alloc] init];</code>。因为<code>init</code>的返回对象可能和<code>alloc</code>返回的不相同</li><li><code>==</code>比较的是两个不同的指针是否指向相同的对象</li><li><code>isEqual:</code>是比较两个对象是否表示相同的数据</li><li>声明标量的时候指明一个初始值，<code>int number = 10;</code>，否则标量的初始值会包含之前栈内的垃圾内容</li><li>对象指针不需要设置初始值，因为会默认设置为nil。</li><li>nil是安全的，给nil发消息什么都不会发生。</li><li>实例变量的内存在对象首次创建时分配，并且当对象解除分配时释放。</li><li><code>@synthesize firstName;</code>的实例变量名称是<code>firstName</code>而不是<code>_firstName</code>。</li><li>你应该总是在initialization method中直接访问instance variable，因为在设置属性时，对象的其他部分可能还没有完全初始化。即时你确定没有提供自定义的访问器方法，并且你自己的类中没有任何副作用，但是你没办法保证将来的子类不会重写该方法。</li><li>当你要子类化一个带有多个<code>init</code>方法的类时，要么通过继承父类的指定初始化器来执行自己的初始化，要么加入自己的其他初始化器。无论哪种，你都应该在做自己的初始化前，调用父类的指定初始化器，来代替<code>[super init]</code>。</li><li>如果为一个readwrite的property实现了getter和setter，或者为readonly的property实现了getter，那么编译器就不会自动合成成员变量，如果需要成员变量，可以通过<code>@synthesize property = _property</code>来手动获取。</li><li>property默认是atomic。</li><li>atomic的属性要么同时自定义setter和getter，要么都由系统合成，如果只自定义一个会报编译器警告。</li><li><strong>Property atomicity is not synonymous with an object’s thread safety.</strong></li><li>__unsafe_unretained和weak类似都不会保持对象存活，但是__unsafe_unretained在目标对象释放后不会把它设置成nil。这就意味着被已释放对象占用的那块内存现在是一个悬挂指针，如果给这个悬挂指针发送消息会崩溃。</li><li>class extension中声明的一个readwrite的属性，会在这个类的所有对象中生成setter方法，虽然不能直接使用点语法或调用setxxx:，但是可以使用<code>performSelect...</code>或<code>objc_msgSend...</code>来调用。即使这个属性在类的public接口中是readonly的。</li><li>编译器不会自动合成采用的协议中声明的属性。</li><li>如果是跨api传递值，比如方法或函数中的参数，则最好是使用跨平台的类型（NSInteger/CGFloat…)；对于局部变量，例如循环中的计数器，则可以使用基本C类型（int/float…）</li><li>collection并不是以某种方式维护每个对象的单独副本，而是使用强引用来跟踪其内容。这意味着，<strong>只要colletion没有被销毁，它里面的任何对象都将保持活动状态</strong></li><li>使用<code>arrayWithObjects:</code>和<code>initWithObjects:</code>创建数组时，最后要带上<code>nil</code>。</li><li>使用字面量语法创建数组时，不能包含<code>nil</code>，可以使用<code>NSNull</code>来代替<code>nil</code>。</li><li><code>NSArray</code>是有序的collection，会包含重复元素；<code>NSSet</code>是无序的collection，不包含重复元素。</li><li>不要在for循环里修改collection</li><li>block会捕获上下文</li><li>在block捕获上下文之后再修改上下文的内容不会改变block捕获的值。如果被捕获的变量使用<code>__block</code>修饰，则会被修改。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;OC编程基础&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="http://www.iosprogrammer.tech/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>KVC/KVO 总结</title>
    <link href="http://www.iosprogrammer.tech/KVC-KVO/"/>
    <id>http://www.iosprogrammer.tech/KVC-KVO/</id>
    <published>2018-10-29T06:10:17.000Z</published>
    <updated>2021-01-26T03:36:15.091Z</updated>
    
    <content type="html"><![CDATA[<p>通过这篇文章彻底掌握KVO、KVO的知识点。</p><a id="more"></a><h3 id="访问对象属性"><a href="#访问对象属性" class="headerlink" title="访问对象属性"></a>访问对象属性</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BankAccount</span>: <span class="title">NSobject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSNumber</span> *currentBalance; <span class="comment">// An attribute</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) Person *owner; <span class="comment">// A to-one relation</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSArray</span> &lt;Transaction *&gt;*transactions; <span class="comment">// A to-many relation</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><code>currentBalance</code>/<code>owner</code>/<code>transactions</code>都是<code>BankAccount</code>的属性。<code>owner</code>属性是一个对象，和<code>BankAccount</code>构成一对一的关系，owner对象中的属性改变后并不会影响到owner本身。</p><p>为了保持封装，对象通常为其接口上的属性提供访问器方法（accessor methods）。在使用访问器方法时必须在编译之前将属性名称写入代码中。访问器方法的名称成为使用它的代码的静态部分。例如：<br><code>[myAccount setCurrentBalance:@(100.0)];</code><br>这样缺乏灵活性，KVC提供了使用字符串标识符访问对象属性的更通用的机制。</p><h4 id="使用key和key-path-标识对象的属性"><a href="#使用key和key-path-标识对象的属性" class="headerlink" title="使用key和key path 标识对象的属性"></a>使用key和key path 标识对象的属性</h4><p>key: 标识特定属性的字符串。通常表示属性的key是代码中显示的属性本身的名称。<br>key必须使用ASCII编码，可能不包含空格，并且通常是以小写字母开头（URL除外）。<br>上面的赋值过程使用KVC表示:<br><code>[myAccount setValue:@(100.0) forKey:@&quot;currentBalance&quot;];</code></p><p>key path: 用来指定要遍历的对象属性序列的一串使用“.”分隔的key。序列中的第一个键的属性是相对于接受者的，并且每个后续键是相对于前一个属性的值的。当需要使用一个方法来向下逐级获取对象层次结构时，key path特别有用。<br>例如，<code>owner.address.street</code>应用于银行账户实例的key path是指存储在银行账户所有者地址中的<code>street</code>字符串的值。</p><h4 id="使用key获取属性值"><a href="#使用key获取属性值" class="headerlink" title="使用key获取属性值"></a>使用key获取属性值</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)getAttributeValuesUsingKeys &#123;</span><br><span class="line">    Account *myAccount = [[Account alloc] init];</span><br><span class="line">    myAccount.currBalance = @<span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    Person *owner = [[Person alloc] init];</span><br><span class="line">    Address *address = [[Address alloc] init];</span><br><span class="line">    address.street = <span class="string">@&quot;第三大道&quot;</span>;</span><br><span class="line">    owner.address = address;</span><br><span class="line">    myAccount.owner = owner;</span><br><span class="line">    </span><br><span class="line">    Transaction *t1 = [[Transaction alloc] init];</span><br><span class="line">    Person *p1 = [[Person alloc] init];</span><br><span class="line">    p1.name = <span class="string">@&quot;p1&quot;</span>;</span><br><span class="line">    t1.payee = p1;</span><br><span class="line">    </span><br><span class="line">    Transaction *t2 = [[Transaction alloc] init];</span><br><span class="line">    Person *p2 = [[Person alloc] init];</span><br><span class="line">    p2.name = <span class="string">@&quot;p2&quot;</span>;</span><br><span class="line">    t2.payee = p2;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSArray</span> *ts = @[t1, t2];</span><br><span class="line">    myAccount.transactions = ts;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSNumber</span> *currBalance = [myAccount valueForKey:<span class="string">@&quot;currBalance&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;currBalance = %@&quot;</span>, currBalance); <span class="comment">// currBalance = 100</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *street = [myAccount valueForKeyPath:<span class="string">@&quot;owner.address.street&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;street = %@&quot;</span>, street); <span class="comment">// street = 第三大道</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSDictionary</span> *values = [myAccount dictionaryWithValuesForKeys:@[<span class="string">@&quot;currBalance&quot;</span>, <span class="string">@&quot;owner&quot;</span>]];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;values = %@&quot;</span>, values); <span class="comment">// values = &#123;currBalance = 100; owner = &quot;&lt;Person: 0x60000179af40&gt;&quot;;&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSArray</span> *payees = [myAccount valueForKeyPath:<span class="string">@&quot;transactions.payee.name&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;payees = %@&quot;</span>, payees); <span class="comment">// payees = (p1, p2)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Terminating app due to uncaught exception &#x27;NSUnknownKeyException&#x27;, reason: &#x27;[&lt;Account 0x600002685ee0&gt; valueForUndefinedKey:]&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//    [myAccount valueForKey:@&quot;owner.address.street&quot;];</span></span><br><span class="line">    <span class="comment">//    [myAccount valueForKey:@&quot;test&quot;];</span></span><br><span class="line">    <span class="comment">//    [myAccount dictionaryWithValuesForKeys:@[@&quot;currBalance&quot;, @&quot;transactions.payee.name&quot;]];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用key设置属性值"><a href="#使用key设置属性值" class="headerlink" title="使用key设置属性值"></a>使用key设置属性值</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)settingAttributeValuesUsingKeys &#123;</span><br><span class="line">    Account *myAccount = [[Account alloc] init];</span><br><span class="line">    [myAccount setValue:@<span class="number">100.0</span> forKey:<span class="string">@&quot;currBalance&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;currBalance = %@&quot;</span>, myAccount.currBalance); <span class="comment">// currBalance = 100</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// operationTimes是非引用类型，这里进行了和NSNumber的自动转换</span></span><br><span class="line">    [myAccount setValue:@<span class="number">10</span> forKey:<span class="string">@&quot;operationTimes&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;operationTimes = %ld&quot;</span>, myAccount.operationTimes); <span class="comment">// operationTimes = 10</span></span><br><span class="line">    </span><br><span class="line">    Person *owner = [[Person alloc] init];</span><br><span class="line">    Address *address = [[Address alloc] init];</span><br><span class="line">   </span><br><span class="line">    [myAccount setValue:address forKeyPath:<span class="string">@&quot;owner.address&quot;</span>]; <span class="comment">// 这时候owner还是null</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;address = %@&quot;</span>, myAccount.owner.address); <span class="comment">// address = (null)</span></span><br><span class="line">    </span><br><span class="line">    [myAccount setValue:owner forKeyPath:<span class="string">@&quot;owner&quot;</span>];</span><br><span class="line">    [myAccount setValue:address forKeyPath:<span class="string">@&quot;owner.address&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;address = %@&quot;</span>, myAccount.owner.address); <span class="comment">// address = &lt;Address: 0x600001a43550&gt;</span></span><br><span class="line">    </span><br><span class="line">    [myAccount setValuesForKeysWithDictionary:@&#123;<span class="string">@&quot;currBalance&quot;</span>: @<span class="number">200.0</span>, <span class="string">@&quot;owner&quot;</span>: owner&#125;];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;currBalance = %@, owner = %@&quot;</span>, myAccount.currBalance, myAccount.owner); <span class="comment">// currBalance = 200, owner = &lt;Person: 0x600001478ee0&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Terminating app due to uncaught exception &#x27;NSUnknownKeyException&#x27;, reason: &#x27;[&lt;Account 0x6000029c2490&gt; setValue:forUndefinedKey:]: xxx&#x27;</span></span><br><span class="line">    <span class="comment">//    [myAccount setValue:@&quot;value&quot; forUndefinedKey:@&quot;undefinedKey&quot;];</span></span><br><span class="line">    <span class="comment">//    [myAccount setValuesForKeysWithDictionary:@&#123;@&quot;currBalance&quot;: @200.0, @&quot;owner.address.street&quot;: @&quot;第一大道&quot;&#125;];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问集合属性"><a href="#访问集合属性" class="headerlink" title="访问集合属性"></a>访问集合属性</h3><p>符合键值编码的对象以与公开其他属性相同的方式公开其多对多属性。您可以使用<code>valueForKey:</code>或<code>setValue:forKey:</code>来获取或设置集合属性。但是，当你想要操作这些集合内容的时候，使用协议定义的可变代理方法通常是最有效的。<br>该协议为集合对象访问定义了三种不同的代理方法，每种方法都有一个key和key path变量：</p><ul><li><code>mutableArrayValueForKey:</code>和<code>mutableArrayValueForKeyPath:</code> 返回一个行为类似<code>NSMutableArray</code>的代理对象</li><li> <code>mutableSetValueForKey:</code>和<code>mutableSetValueFOrKeyPath:</code> 返回一个行为类似<code>NSMutableSet</code>的代理对象</li><li><code>mutableOrderedSetValueForKey:</code>和<code>mutableOrderedSetValueForKeyPath:</code> 返回一个行为类似<code>NSMutableOrderedSet</code>的代理对象<br>当您对代理对象进行操作，向对象添加元素，从中删除元素或者替换其中的元素时，协议的默认实现会相应地修改基础属性。这比使用<code>valueForKey:</code>获取一个不可变的集合对象，再创建一个可修改的集合，然后把修改后的集合通过<code>setValue:forKey:</code>更有效。在许多情况下，它比直接使用可变属性也是更有效的。这些方法为持有集合对象的对象们提供了维护KVO特性的好处。<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)accessingCollectionProperties &#123;</span><br><span class="line">    Transaction *t1 = [[Transaction alloc] init];</span><br><span class="line">    Transaction *t2 = [[Transaction alloc] init];</span><br><span class="line">    Account *myAccount = [[Account alloc] init];</span><br><span class="line">    </span><br><span class="line">    [myAccount addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@&quot;transactions&quot;</span> options:<span class="built_in">NSKeyValueObservingOptionOld</span> | <span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    [myAccount setValue:@[t1, t2] forKey:<span class="string">@&quot;transactions&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;1st transactions = %@&quot;</span>, myAccount.transactions); <span class="comment">// 1st transactions = (&quot;&lt;Transaction: 0x6000009d1400&gt;&quot;,&quot;&lt;Transaction: 0x6000009d1420&gt;&quot;)</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> &lt;Transaction *&gt;*transactions = [myAccount mutableArrayValueForKey:<span class="string">@&quot;transactions&quot;</span>];</span><br><span class="line">    </span><br><span class="line">    [transactions addObject:[[Transaction alloc] init]];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;2nd transactions = %@&quot;</span>, myAccount.transactions); <span class="comment">// 2nd transactions = (&quot;&lt;Transaction: 0x6000009d1400&gt;&quot;,&quot;&lt;Transaction: 0x6000009d1420&gt;&quot;,&quot;&lt;Transaction: 0x6000009cabf0&gt;&quot;)</span></span><br><span class="line">    </span><br><span class="line">    [transactions removeLastObject];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;3th transactions = %@&quot;</span>, myAccount.transactions); <span class="comment">// 3th transactions = (&quot;&lt;Transaction: 0x6000009d1400&gt;&quot;,&quot;&lt;Transaction: 0x6000009d1420&quot;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用集合操作符"><a href="#使用集合操作符" class="headerlink" title="使用集合操作符"></a>使用集合操作符</h4>当您向<code>valueForKeyPath:</code>消息发送符合键值编码的对象时，可以在key path中嵌入集合运算符。集合运算符是一个小的关键字列表之一，前面是一个@符号，它指定了getter应该执行的操作，以便在返回之前以某种方式操作数据。<code>NSObject</code>为<code>valueForKeyPath:</code>提供了默认实现。<br>当key path包含集合运算符时，运算符之前的部分称为左键路径，指示相对于消息接受者操作的集合，当你直接向一个集合（例如<code>NSArray</code>）发送消息时左键路径或许可以省略。操作符之后的部分称为右键路径，指定操作符应处理的集合中的属性，除了<code>@count</code>之外的所有操作符都需要一个右键路径。<br><img src="http://image.iosprogrammer.hongbility.com/KVC_KVOkeypath.jpg"><br>集合运算符表现出三种基本类型的行为：</li><li><strong>聚合运算符</strong>以某种方式合并集合的对象，并返回通常与右键路径中指定的属性的数据类型匹配的单个对象。<code>@count</code>是一个例外，它没有正确的关键路径并始终将返回一个<code>NSNumber</code>实例。包括：<code>@avg</code>/<code>@count</code>/<code>@max</code>/<code>@min</code>/<code>@sum</code>。</li><li><strong>数组运算符</strong>返回一个<code>NSArray</code>实例，该实例包含命名集合中保存的对象的某个子集。包含：<code>@distinctUnionOfObjects</code>/<code>@unionOfObjects</code>。</li><li><strong>嵌套运算符</strong>处理包含其他集合的集合，并根据操作符返回一个<code>NSArray</code>或<code>NSSet</code>实例，它以某种方式组合嵌套集合的对象。包含：<code>@distinctUnionOfArrays</code>/<code>@unionOfArrays</code>/<code>@distinctUnionOfSets</code>。</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)usingCollectionOperators &#123;</span><br><span class="line">    Transaction *t1 = [Transaction transactionWithPayee:<span class="string">@&quot;Green Power&quot;</span> amount:@(<span class="number">120.00</span>) date:[<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">100</span>]];</span><br><span class="line">    Transaction *t3 = [Transaction transactionWithPayee:<span class="string">@&quot;Green Power&quot;</span> amount:@(<span class="number">170.00</span>) date:[<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">300</span>]];</span><br><span class="line">    Transaction *t5 = [Transaction transactionWithPayee:<span class="string">@&quot;Car Loan&quot;</span> amount:@(<span class="number">250.00</span>) date:[<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">500</span>]];</span><br><span class="line">    Transaction *t6 = [Transaction transactionWithPayee:<span class="string">@&quot;Car Loan&quot;</span> amount:@(<span class="number">250.00</span>) date:[<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">600</span>]];</span><br><span class="line">    Transaction *t13 = [Transaction transactionWithPayee:<span class="string">@&quot;Animal Hospital&quot;</span> amount:@(<span class="number">600.00</span>) date:[<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">500</span>]];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSArray</span> *transactions = @[t1, t3, t5, t6, t13];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 聚合运算符</span></span><br><span class="line"><span class="comment">     * 聚合运算符可以处理数组或属性集，从而生成反映集合某些方面的单个值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// @avg 平均值</span></span><br><span class="line">    <span class="built_in">NSNumber</span> *transactionAverage = [transactions valueForKeyPath:<span class="string">@&quot;@avg.amount&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;transactionAverage = %@&quot;</span>, transactionAverage); <span class="comment">// transactionAverage = 278</span></span><br><span class="line">    <span class="comment">// @count 个数</span></span><br><span class="line">    <span class="built_in">NSNumber</span> *numberOfTransactions = [transactions valueForKeyPath:<span class="string">@&quot;@count&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;numberOfTransactions = %@&quot;</span>, numberOfTransactions); <span class="comment">// numberOfTransactions = 5</span></span><br><span class="line">    <span class="comment">// @max 最大值 使用compare:进行比较</span></span><br><span class="line">    <span class="built_in">NSDate</span> *latestDate = [transactions valueForKeyPath:<span class="string">@&quot;@max.date&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;latestDate = %@&quot;</span>, latestDate); <span class="comment">// latestDate = Thu Nov  1 15:05:59 2018</span></span><br><span class="line">    <span class="comment">// @min 最小值 使用compare:进行比较</span></span><br><span class="line">    <span class="built_in">NSDate</span> *earliestDate = [transactions valueForKeyPath:<span class="string">@&quot;@min.date&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;earliestDate = %@&quot;</span>, earliestDate);<span class="comment">// earliestDate = Thu Nov  1 14:57:39 2018</span></span><br><span class="line">    <span class="comment">// @sum 总和</span></span><br><span class="line">    <span class="built_in">NSNumber</span> *amountSum = [transactions valueForKeyPath:<span class="string">@&quot;@sum.amount&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;amountSum = %@&quot;</span>, amountSum); <span class="comment">// amountSum = 1390</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 数组运算符</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 数组运算符导致valueForKeyPath:返回与右键路径指示的特定对象集相对应的对象数组。</span></span><br><span class="line"><span class="comment">     * 如果使用数组运算符时任何叶对象为nil，则valueForKeyPath：方法会引发异常。</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="comment">// @distinctUnionOfObjects 创建并返回一个数组，该数组包含与右键路径指定的属性对应的集合的不同对象。会删除重复对象。</span></span><br><span class="line">    <span class="built_in">NSArray</span> *distinctPayees = [transactions valueForKeyPath:<span class="string">@&quot;@distinctUnionOfObjects.payee&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;distinctPayees = %@&quot;</span>, distinctPayees); <span class="comment">// distinctPayees = (&quot;Green Power&quot;, &quot;Animal Hospital&quot;, &quot;Car Loan&quot;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// @unionOfObjects 创建并返回一个数组，该数组包含与右键路径指定的属性对应的集合的所有对象。不删除重复对象</span></span><br><span class="line">    <span class="built_in">NSArray</span> *payees = [transactions valueForKeyPath:<span class="string">@&quot;@unionOfObjects.payee&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;payees = %@&quot;</span>, payees); <span class="comment">// payees = (&quot;Green Power&quot;, &quot;Green Power&quot;, &quot;Car Loan&quot;, &quot;Car Loan&quot;, &quot;Animal Hospital&quot;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 嵌套运算符</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 嵌套运算符对嵌套集合进行操作，集合中的每个条目都包含一个集合。</span></span><br><span class="line"><span class="comment">     * 如果使用数组运算符时任何叶对象为nil，则valueForKeyPath：方法会引发异常。</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    Transaction *moreT1 = [Transaction transactionWithPayee:<span class="string">@&quot;General Cable - Cottage&quot;</span> amount:@(<span class="number">120.00</span>) date:[<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">10</span>]];</span><br><span class="line">    Transaction *moreT2 = [Transaction transactionWithPayee:<span class="string">@&quot;General Cable - Cottage&quot;</span> amount:@(<span class="number">1550.00</span>) date:[<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">3</span>]];</span><br><span class="line">    Transaction *moreT7 = [Transaction transactionWithPayee:<span class="string">@&quot;Hobby Shop&quot;</span> amount:@(<span class="number">600.00</span>) date:[<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">160</span>]];</span><br><span class="line">    <span class="built_in">NSArray</span> *moreTransactions = @[moreT1, moreT2, moreT7];</span><br><span class="line">    <span class="built_in">NSArray</span> *arrayOfArrays = @[transactions, moreTransactions];</span><br><span class="line">    <span class="comment">// @distinctUnionOfArrays  指定@distinctUnionOfArrays运算符时，valueForKeyPath:创建并返回一个数组，该数组包含与右键路径指定的属性对应的所有集合的组合的不同对象。</span></span><br><span class="line">    <span class="built_in">NSArray</span> *collectedDistinctPayees = [arrayOfArrays valueForKeyPath:<span class="string">@&quot;@distinctUnionOfArrays.payee&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;collectedDistinctPayees = %@&quot;</span>, collectedDistinctPayees); <span class="comment">// collectedDistinctPayees = ( &quot;General Cable - Cottage&quot;, &quot;Animal Hospital&quot;, &quot;Hobby Shop&quot;, &quot;Green Power&quot;, &quot;Car Loan&quot;)</span></span><br><span class="line">    <span class="comment">// @unionOfArrays 与@distinctUnionOfArrays 不同的是不会删除相同的元素</span></span><br><span class="line">    <span class="built_in">NSArray</span> *collectedPayees = [arrayOfArrays valueForKeyPath:<span class="string">@&quot;@unionOfArrays.payee&quot;</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;collectedPayees = %@&quot;</span>, collectedPayees); <span class="comment">// collectedPayees = (&quot;Green Power&quot;, &quot;Green Power&quot;, &quot;Car Loan&quot;, &quot;Car Loan&quot;, &quot;Animal Hospital&quot;, &quot;General Cable - Cottage&quot;, &quot;General Cable - Cottage&quot;, &quot;Hobby Shop&quot;)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// @distinctUnionOfSets 与@distinctUnionOfArrays作用相同，只是用于NSSet对象而不是NSArray</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问者搜索模式"><a href="#访问者搜索模式" class="headerlink" title="访问者搜索模式"></a>访问者搜索模式</h3><p>NSObject提供的NSkeyValueCoding协议的默认实现使用明确定义的规则集将基于键的访问器调用映射到对象的基础属性。这些协议方法使用“key”在其自己的对象实例中搜索访问器、实例变量以及遵循某个命名规则的相关方法。虽然您很少修改此默认搜索，但了解它的工作方式会有所帮助，既可以跟踪键值编码对象的行为，也可以使您自己的对象兼容KVC。</p><h4 id="Getter的搜索模式"><a href="#Getter的搜索模式" class="headerlink" title="Getter的搜索模式"></a>Getter的搜索模式</h4><p><code>valueForKey:</code>的默认实现是，给定<code>key</code>参数作为输入，通过下面的过程，在接收<code>valueForKey:</code>调用的类实例中操作。</p><ol><li>按顺序搜索访问器方法<code>get&lt;Key&gt;</code>/<code>&lt;key&gt;</code>/<code>is&lt;Key&gt;</code>/<code>_&lt;key&gt;</code>。如果找到，调用该方法并且带着方法的调用结果调转到第5步执行；否则，继续下一步。</li><li>如果没有找到简单的访问方法，搜索其名称匹配某些模式的方法的实例。其中匹配模式包含<code>countOf&lt;Key&gt;</code>，<code>objectIn&lt;Key&gt;AtIndex:</code>（对应于<code>NSArray</code>定义的基本方法），和<code>&lt;key&gt;AtIndexs:</code>（对应于<code>NSArray</code>的方法<code>objectsAtIndexs:</code>）<br>一旦找到第一个和其他两个中的至少一个，则创建一个响应所以<code>NSArray</code>方法并返回该方法的集合代理对象。否则，执行第3步。<br>代理对象随后将任何<code>NSArray</code>接收到的一些组合的消息。**实际上，与符合键值编码对象一起工作的代理对象允许底层属性的行为就像它是<code>NSArray</code>一样，即便它不是。</li><li>如果没有找到简单的访问器方法或数组访问方法组，则寻找三个方法<code>countOf&lt;Key&gt;</code>/<code>enumeratorOf&lt;Key&gt;</code>/<code>memberOf&lt;Key&gt;:</code>，对应<code>NSSet</code>类的基本方法。<br>如果三个方法全找到了，则创建一个集合代理对象来响应所有的NSSet方法并返回。否则，执行第4步。</li><li>如果上面的方法都没有找到，并且接受者的类方法<code>accessInstanceVariablesDirectly</code>返回<code>YES</code>（默认YES），则按序搜索以下实例变量：<code>_&lt;key&gt;</code>/<code>_is&lt;Key&gt;</code>/<code>&lt;key&gt;</code>/<code>is&lt;Key&gt;</code>。如果找到其中之一，直接获取实例变量的值并跳转到第5步；否则执行第6步。</li><li>如果检索到的属性值是对象指针，则只返回结果；如果值是受<code>NSNumber</code>支持的标量，则将其存储在<code>NSNumber</code>实例中并返回；如果结果是<code>NSNumber</code>不支持的标量，则转换成<code>NSValue</code>对象并返回</li><li>如果以上所有的尝试都失败了，则调用<code>valueForUndefinedKey:</code>，这个方法默认抛出异常，<code>NSObject</code>的子类可以重写来自定义行为。</li></ol><h4 id="Setter的搜索模式"><a href="#Setter的搜索模式" class="headerlink" title="Setter的搜索模式"></a>Setter的搜索模式</h4><p><code>setValue:forKey:</code>的默认实现是给定<code>key</code>和<code>value</code>作为参数输入，尝试把<code>value</code>设置给以<code>key</code>命名的属性。过程如下：</p><ol><li>按序搜索<code>set&lt;Key&gt;:</code>或<code>_set&lt;Key&gt;</code>，如果找到，则使用输入参数调用并结束。</li><li>如果没有找到简单的访问器方法，并且如果类方法<code>accessInstanceVariablesDirectly</code>返回<code>YES</code>（默认为YES），则按序搜索以下实例变量: <code>_&lt;key&gt;</code>/<code>_is&lt;Key&gt;</code>/<code>&lt;key&gt;</code>/<code>is&lt;Key&gt;</code>，如果找到了则直接进行赋值并结束。</li><li>以上方法皆失败则调用<code>setValue:forUndefinedKey:</code>，这个方法默认抛出异常，<code>NSObject</code>的子类可以自定义。</li></ol><h1 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h1><p>Key-value observing提供了一种机制，允许对象把自身属性的更改通知给其他属性。它对应用程序中model和controller层之间的通信特别有用。通常，控制器对象观察模型对象的属性，视图对象通过控制器观察模型对象的属性。另外，一个模型对象或许会观察另一个模型对象（通常用与确认从属值何时改变）或甚至自身（再次确认从属值何时改变）。<br>你可以观察属性，包括简单属性，一对一关系和多对多关系。多对多关系的观察者被告知所作出的改变的类型——以及改变中涉及哪些对象。</p><h2 id="注册KVO"><a href="#注册KVO" class="headerlink" title="注册KVO"></a>注册KVO</h2><ul><li>使用<code>addObserver:forKeyPath:options:content:</code>方法来给observer注册一个observed object</li><li>在observer内部实现<code>observerValueForKeyPath:ofObject:change:context:</code>来接收更改的通知消息。</li><li>当不再应该接收消息时，使用<code>removeObserver:forKeyPath:</code>方法来反注册观察者。起码也要在observer被移除前调用这个方法。</li></ul><h3 id="注册Observer"><a href="#注册Observer" class="headerlink" title="注册Observer"></a>注册Observer</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addObserver:forKeyPath:options:content:</span><br></pre></td></tr></table></figure><h4 id="options"><a href="#options" class="headerlink" title="options"></a>options</h4><p>options参数指定了一个按位<code>OR</code>的常量选项，会影响通知中提供的更改字典的内容和生成通知的方式。<br>你可以选择使用<code>NSKeyValueObservingOptionOld</code>选项，在被观察的属性修改前收到旧值；也可以使用<code>NSKeyValueObservingOptionNew</code>来获取修改后的新值。通过<code>NSKeyValueObservingOptionOld | NSKeyValueObservingOptionNew</code>获取两者。<br>使用<code>NSKeyValueObservingOptionInitial</code>选项，让被观察的属性在<code>addObserver:forKeyPath:options:context</code>方法返回前发送即时通知。你可以使用此附加的一次性通知来在观察者中建立属性的初始值。<br>通过包含<code>NSKeyValueObservingOptionPrior</code>来指示被观察对象在属性更改之前发送通知（除了在更改之后发送通知）。在更改之前发送的通知中的<code>change</code>字典始终包含<code>NSKeyValueChangeNotificationIsPriorKey</code>，其值是包含布尔值YES的NSNumber对象，但不包含<code>NSKeyValueChangeNewKey</code>的内容。如果指定此选项，则更改后发送的通知中的<code>change</code>字典的内容和未指定此选项时包含的内容相同。当观察者自己的键值观察兼容性要求它为自己的一个属性调用-willChangexxx方法之一时，可以使用此选项，并且该属性的值取决于被观察对象的属性的值。</p><h4 id="context"><a href="#context" class="headerlink" title="context"></a>context</h4><p><code>addObserver:forKeyPath:options:context:</code>消息中的上下文指针包含将在相应的更改通知中传递回观察者的任意数据。您可以使用NULL来完全指定并依赖于<code>key path</code>字符串来确定更改通知的来源，但是这种方法可能会导致其超类也因不同原因观察到相同密钥路径的对象出现问题。</p><p>一个更安全且具有扩展性的方法是使用<code>content</code>来确保你收到的通知就是发给你的而不是超类的。</p><p>类中唯一命名的静态（static）变量的地址是一个很好的content。在超类或子类中以类似的方式选择的上下文不太可能重叠。您可以为整个类选择同一个上下文，并根据通知消息中的key path字符串来确定更改的内容；或者，您可以为每个观察到的密钥路径创建不同的上下文，从而完全绕过字符串比较的需要，从而实现更有效的通知解析。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)registerAsObserver &#123;</span><br><span class="line">    BankAccount *myAccount = [[BankAccount alloc] init];</span><br><span class="line">    [myAccount addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@&quot;currBalance&quot;</span> options:<span class="built_in">NSKeyValueObservingOptionInitial</span> | <span class="built_in">NSKeyValueObservingOptionNew</span> | <span class="built_in">NSKeyValueObservingOptionOld</span> | <span class="built_in">NSKeyValueObservingOptionPrior</span> context:PersonAccountBalanceContext];</span><br><span class="line">    myAccount.currBalance = @<span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，<strong>键值观察<code>addObserver:forKeyPath:options:context:</code>方法不对观察者、被观察的对象、上下文保持强引用。如需要，你应该对它们保持强引用。</strong></p><h3 id="接受改变的通知"><a href="#接受改变的通知" class="headerlink" title="接受改变的通知"></a>接受改变的通知</h3><p>当对象的被观察属性值改变的时候，观察者对象会收到<code>observeValueForKeyPath:ofObject:change:context:</code>消息。所有的观察者必须实现这个方法。</p><p>观察对象提供触发通知的key path，自身作为<code>object</code>，<code>change</code>字典包含改变的细节，并且<code>context</code>指针就是观察者被注册时提供的。</p><p><code>NSKeyValueChangeKindKey</code>提供改变类型的信息。<code>NSKeyValueChangeKindKey</code>表示观察对象的值已更改。如果观察的属性是一个对多的关系，<code>NSKeyValueChangeInsertion</code>/<code>NSKeyValueChangeRemoval</code>/<code>NSKeyValueChangeReplacement</code>分别表示集合的插入、删除、替换操作。<code>NSKeyValueChangeIndexesKey</code>表示集合中已更改内容的<code>NSIndexSet</code>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; *)change context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">    <span class="keyword">if</span> (context == PersonAccountBalanceContext) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;PersonAccountBalanceContext 对应的属性改变了&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context == PersonAccountTransactionContext) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([change[<span class="built_in">NSKeyValueChangeKindKey</span>] unsignedIntValue] == <span class="built_in">NSKeyValueChangeSetting</span>) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;集合内容赋值 索引为：%@&quot;</span>, change[<span class="built_in">NSKeyValueChangeIndexesKey</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([change[<span class="built_in">NSKeyValueChangeKindKey</span>] unsignedIntValue] == <span class="built_in">NSKeyValueChangeInsertion</span>) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;集合内容插入 索引为：%@&quot;</span>, change[<span class="built_in">NSKeyValueChangeIndexesKey</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([change[<span class="built_in">NSKeyValueChangeKindKey</span>] unsignedIntValue] == <span class="built_in">NSKeyValueChangeRemoval</span>) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;集合内容删除 索引为：%@&quot;</span>, change[<span class="built_in">NSKeyValueChangeIndexesKey</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([change[<span class="built_in">NSKeyValueChangeKindKey</span>] unsignedIntValue] == <span class="built_in">NSKeyValueChangeReplacement</span>) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;集合内容替换 索引为：%@&quot;</span>, change[<span class="built_in">NSKeyValueChangeIndexesKey</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移除观察者对象"><a href="#移除观察者对象" class="headerlink" title="移除观察者对象"></a>移除观察者对象</h3><p>通过想观察者发送<code>removeObserver:forKeyPath:context</code>消息来移除观察者对象。收到该消息后，观察者对象将不再接收任何<code>observerValueForKeyPath:ofObject:change:context</code>中指定key path/object的消息。</p><p>删除观察者时，注意：</p><ul><li><strong>移除和添加的方法要保持对称</strong>，否则会引发异常。如果无法保持对称，则把移除的方法放到try/catch块中。</li><li>对象释放时，不会自动把自己从观察者中移除，此时被观察者继续发送通知。但是就像任何其他消息一样，改变的通知发送给了已经释放的对象会触发内存访问异常。因此，<strong>务必在观察者从内存中消失前，将其移除</strong></li><li>协议没有提供方法来查询一个对象是否是观察者或被观察者。你必须在代码中自行避免错误。典型的方案是在观察者初始化期间（init或dealloc）注册为观察者，并在释放时（dealloc）注销。</li></ul><h2 id="兼容KVO"><a href="#兼容KVO" class="headerlink" title="兼容KVO"></a>兼容KVO</h2><p>为了让特定属性符合KVO标准，class必须满足一下内容：</p><ul><li>该类必须是符合该属性的KVC</li><li>该类会为该属性触发KVO通知</li><li>相关的key已经被成功注册</li></ul><p>有两种技术可确保发出KVO通知。NSObject提供自动支持，默认情况下可用于符合键值编码的类的所有属性。通常，如果你遵守Cocoa编码和命名约定，则可以使用自动通知，而不必编写任何代码。</p><p>手动方式为通知触发时提供了更多的控制权，并且需要额外编码。你可以通过实现<code>automaticallyNotifiesObserversForKey:</code>来控制子类属性的自动通知。</p><h3 id="自动通知"><a href="#自动通知" class="headerlink" title="自动通知"></a>自动通知</h3><p>下列方法列举了会触发自动通知的一些场景：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用访问器方法。</span></span><br><span class="line">[account setName：@“Savings”];</span><br><span class="line"> </span><br><span class="line"><span class="comment">//使用setValue：forKey：。</span></span><br><span class="line">[account setValue：@“Savings”forKey：@“name”];</span><br><span class="line"> </span><br><span class="line"><span class="comment">//使用密钥路径，其中&#x27;account&#x27;是&#x27;document&#x27;的kvc兼容属性。</span></span><br><span class="line">[document setValue：@“Savings”forKeyPath：@“account.name”];</span><br><span class="line"> </span><br><span class="line"><span class="comment">//使用mutableArrayValueForKey：检索关系代理对象。</span></span><br><span class="line">Transaction * newTransaction = &lt;＃为帐户＃&gt;创建新交易;</span><br><span class="line"><span class="built_in">NSMutableArray</span> * transactions = [account mutableArrayValueForKey：@“transactions”];</span><br><span class="line">[transactions addObject：newTransaction];</span><br></pre></td></tr></table></figure><h3 id="手动通知"><a href="#手动通知" class="headerlink" title="手动通知"></a>手动通知</h3><p>有些情况下，你可能想要控制通知的过程，例如，最大限度减少因应用程序特定原因而不必要的触发通知，或把一组通知整合到一个。</p><p>手动通知和自动通知不是互斥的。手动和自动的通知可以同时触发。如果你只想要手动触发，则需要通过重写<code>automaticallyNotifiesObserversForKey:</code>方法来禁止自动通知。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)automaticNotifiesObserversForKey:(<span class="built_in">NSString</span> *)theKey &#123;</span><br><span class="line">    <span class="built_in">BOOL</span> automatic = <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">if</span> ([theKey isEqualToString：@“balance”]) &#123;</span><br><span class="line">        automatic = <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        automatic = [<span class="keyword">super</span> automaticNotifiesObserversForKey: theKey];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> automatic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**要实现手动观察者通知，你要在值改变前调用<code>willChangeValueForKey:</code>，并在值改变后调用<code>didChangeValueForKey:</code>。有三组类似的方法：</p><ul><li><code>willChangeValueForKey:</code>和<code>didChangeValueForKey:</code>。用于单个对象</li><li><code>willChange:valuesAtIndexes:forKey:</code>和<code>didChange:valuesAtIndexes:forKey:</code>。用于有序集合</li><li><code>willChangeValueForKey:withSetMutation:usingObjects:</code>和<code>willChangeValueForKey:withSetMutation:usingObjects:</code>。用于无须集合</li></ul><p>下面在访问器方法中手动触发：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setBalance:(<span class="keyword">double</span>)theBalance &#123;</span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@&quot;balance&quot;</span>];</span><br><span class="line">    _balance = theBalance;</span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@&quot;balance&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了减少不必要的通知，可以先检查值是否改变了，然后决定是否发通知：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setBalance:(<span class="keyword">double</span>)theBalance &#123;</span><br><span class="line">    <span class="keyword">if</span> (theBalance != _balance) &#123;</span><br><span class="line">        [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@&quot;balance&quot;</span>];</span><br><span class="line">        _balance = theBalance;</span><br><span class="line">        [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@&quot;balance&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个操作导致多个key发生改变，必须嵌套发送通知：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setBalance:(<span class="keyword">double</span>)theBalance &#123;</span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@&quot;balance&quot;</span>];</span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@&quot;itemChanged&quot;</span>];</span><br><span class="line">    _balance = theBalance;</span><br><span class="line">    _itemChanged = _itemChanged+<span class="number">1</span>;</span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@&quot;itemChanged&quot;</span>];</span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@&quot;balance&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在有序的to-many关系中，除了指定更改的key，还不许指定更改的类型和所涉及对象的索引。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)removeTransactionsAtIndexes:(<span class="built_in">NSIndexSet</span> *)indexes &#123;</span><br><span class="line">    [<span class="keyword">self</span> willChange:<span class="built_in">NSKeyValueChangeRemoval</span></span><br><span class="line">        valuesAtIndexes:indexes forKey:<span class="string">@&quot;transactions&quot;</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Remove the transaction objects at the specified indexes.</span></span><br><span class="line"> </span><br><span class="line">    [<span class="keyword">self</span> didChange:<span class="built_in">NSKeyValueChangeRemoval</span></span><br><span class="line">        valuesAtIndexes:indexes forKey:<span class="string">@&quot;transactions&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册从属keys"><a href="#注册从属keys" class="headerlink" title="注册从属keys"></a>注册从属keys</h2><p>在许多情况下，一个属性的值取决于另一个对象中的一个或多个其他属性的值。如果一个属性的值发生更改，则还应标记派生属性的值以进行更改。</p><h3 id="To-One-关系"><a href="#To-One-关系" class="headerlink" title="To-One 关系"></a>To-One 关系</h3><p>要为一对一关系自动触发通知，应该重写<code>keyPathsForValuesAffectingValueForKey</code>或实现一个合适的方法，该方法遵循它为注册依赖键定义的模式。</p><p>例如，<code>fullName</code>取决于<code>firstName</code>和<code>lastName</code>。返回<code>fullName</code>的方法可以写成如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- （<span class="built_in">NSString</span> *）fullName &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat：@“％@％@”，firstName，lastName];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>firstName</code>或<code>lastName</code>发生改变时，必须通知观察<code>fullName</code>属性的程序，因为它们影响这个属性的值。</p><p>一个解决方案是重写<code>keyPathsForValuesAffectingValueForKey</code>来指定<code>fullName</code>属性依赖于<code>lastName</code>和<code>firstName</code>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">NSSet</span> *)keyPathsForValuesAffectingValueForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">NSSet</span> *keyPaths = [<span class="keyword">super</span> keyPathsForValuesAffectingValueForKey:key];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ([key isEqualToString:<span class="string">@&quot;fullName&quot;</span>]) &#123;</span><br><span class="line">        <span class="built_in">NSArray</span> *affectingKeys = @[<span class="string">@&quot;lastName&quot;</span>, <span class="string">@&quot;firstName&quot;</span>];</span><br><span class="line">        keyPaths = [keyPaths setByAddingObjectsFromArray:affectingKeys];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> keyPaths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写通常应该调用super并返回一个集合，以免影响超类中对此方法的重写。</p><p>通过重写<code>keyPathsForValuesAffecting&lt;Key&gt;</code>也可以达到相同的效果。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">NSSet</span> *)keyPathsForValuesAffectingFullName &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithObjects:<span class="string">@&quot;lastName&quot;</span>, <span class="string">@&quot;firstName&quot;</span>, <span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="To-many-关系"><a href="#To-many-关系" class="headerlink" title="To-many 关系"></a>To-many 关系</h3><p><code>keyPathsForValuesAffectingValueForKey:</code>方法不支持to-many关系的key paths。可以使用下面两种方案来处理to-many 关系：</p><ol><li>使用key-value observing注册父项作为子项的相关属性观察者。当子对象添加到关系或从关系中删除的时候，你必须添加或删除父对象。在<code>observeValueForKeyPath:ofObject:change:context:</code>方法中，你可以更新依赖值以相应更改，如下：<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span> addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@&quot;transactions&quot;</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">NULL</span>];</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; *)change context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;amount = %@&quot;</span>, [<span class="keyword">self</span> valueForKeyPath:<span class="string">@&quot;transactions.@sum.amount&quot;</span>]);</span><br><span class="line">    [<span class="keyword">self</span> setTotalConsumption:[<span class="keyword">self</span> valueForKeyPath:<span class="string">@&quot;transactions.@sum.amount&quot;</span>]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在Core Data中，则可以将父项作为其托管对象上下文的观察者注册到应用程序的通知中心。父项应以类似于键值观察的方式回应孩子们发布的相关变更通知。</li></ol><h2 id="Key-Value-Observing-的实现细节"><a href="#Key-Value-Observing-的实现细节" class="headerlink" title="Key-Value Observing 的实现细节"></a>Key-Value Observing 的实现细节</h2><p>自动key-value observing 是使用一种叫做<em>isa-swizzling</em>的技术实现的。</p><p><em>isa</em>指针指向维护一个调度表（dispatch table）的对象的类。该调度表包含了指向该类实现的方法的指针，以及其他数据。</p><p>当观察者注册对象的属性时，观察对象的isa指针被修改，指向中间类而不是真正的类。因此，isa指针的值不一定反映实例的实际类。</p><p>永远不要依赖isa指针来确定类成员。而应该使用<code>class</code>方法来决定实例所属的类。</p><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><p><a href="https://github.com/shizhiang/KVC_KVO-Tutorial">示例代码</a></p><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107-SW1">KVC</a></p><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177-BCICJDHA">KVO</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过这篇文章彻底掌握KVO、KVO的知识点。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="http://www.iosprogrammer.tech/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS内存管理</title>
    <link href="http://www.iosprogrammer.tech/iOS-Memory-Management/"/>
    <id>http://www.iosprogrammer.tech/iOS-Memory-Management/</id>
    <published>2018-10-03T04:42:21.000Z</published>
    <updated>2021-01-26T03:32:34.860Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容是对<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html#//apple_ref/doc/uid/10000011-SW1">Advanced Memory Management Programming Guide</a>中重点内容的总结</p><a id="more"></a><h2 id="内存管理策略"><a href="#内存管理策略" class="headerlink" title="内存管理策略"></a>内存管理策略</h2><h3 id="基本内存管理规则"><a href="#基本内存管理规则" class="headerlink" title="基本内存管理规则"></a>基本内存管理规则</h3><p>内存管理模型基于对象所有权的。任何对象可能有一个或多个所有者。对象只要有超过一个所有者就会继续存在；如果一个对象没有所有者了，运行时系统就会把它销毁。为了让开发者清楚自己什么时候拥有/不拥有对象，Cocoa设置了一些规则：</p><ul><li>你拥有你创建的对象 - You own any object you create<blockquote><p>使用以”alloc”, “new”, “copy”, “mutableCopy”开头的方法创建对象</p></blockquote></li><li>你可以使用retain来获取对象的所有权<blockquote><p>可以在两种情况下使用<code>retain</code>：（1）在存储器方法的实现或者<code>init</code>方法中，获取要作为属性值存储的对象的所有权；（2）避免某些操作的副作用造成对象不可用</p></blockquote></li><li>当你不再需要的时候，一定要放弃对象所有权<blockquote><p>给对象发送<code>release</code>/<code>autorelease</code>消息来放弃所有权。因此，在Cocoa术语中，把放弃所有权称为”releasing”一个对象</p></blockquote></li><li>一定不能放弃你没有所有权的对象</li></ul><h2 id="内存管理实战"><a href="#内存管理实战" class="headerlink" title="内存管理实战"></a>内存管理实战</h2><h3 id="使用存储器方法来使内存管理更容易"><a href="#使用存储器方法来使内存管理更容易" class="headerlink" title="使用存储器方法来使内存管理更容易"></a>使用存储器方法来使内存管理更容易</h3><p>如果你的类有一个对象属性，你必须确保被设置的对象在使用过程中不会被释放。因此在它被设置的时候，你必须声明对它的所有权。并且你必须确保之后放弃对当前持有值的所有权。虽然这样做有时候是冗长乏味的，但是如果你坚持这种方法，就可以显著减少内存管理问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@interface Counter : NSObject</span><br><span class="line">@property (nonatomic, retain) NSNumber *count;</span><br><span class="line">@end;</span><br></pre></td></tr></table></figure><blockquote><p>这个<code>property</code>声明了一对存取器方法。通常，我们应当让编译器合成这些方法；但是，看一下它们是怎么实现的会很有意义。</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSNumber</span> *)count &#123;</span><br><span class="line">    <span class="keyword">return</span> _count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>“get”存取器只是返回了合成的实例变量并不需要<code>retain</code>或者<code>release</code></p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setCount:(<span class="built_in">NSNumber</span> *)newCount &#123;</span><br><span class="line">    [newCount <span class="keyword">retain</span>];</span><br><span class="line">    [_count release];</span><br><span class="line">    <span class="comment">// Make the new assignment.</span></span><br><span class="line">    _count = newCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>“set”存取器需要先<code>retain</code>新值，之后<code>release</code>旧值，最后进行赋值操作。为了避免前后是同一个对象的情况下出现意外的问题，必须要在<code>realse</code>之前调用<code>retain</code>。</p></blockquote><h3 id="不要在初始化和dealloc方法中使用存取器方法"><a href="#不要在初始化和dealloc方法中使用存取器方法" class="headerlink" title="不要在初始化和dealloc方法中使用存取器方法"></a>不要在初始化和dealloc方法中使用存取器方法</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- init &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        _count = [[<span class="built_in">NSNumber</span> alloc] initWithInteger:<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- initWithCount:(<span class="built_in">NSNumber</span> *)startingCount &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        _count = [startingCount <span class="keyword">copy</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">    [_count release];</span><br><span class="line">    [<span class="keyword">super</span> dealloc];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用弱引用来避免循环引用"><a href="#使用弱引用来避免循环引用" class="headerlink" title="使用弱引用来避免循环引用"></a>使用弱引用来避免循环引用</h3><p>只有当对象的所有强引用都释放后对象才能被释放，如果两个对象互相强引用了彼此，那么它们都不会被释放，这样就造成了<strong>循环引用</strong><br><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Art/retaincycles_2x.png" alt="循环引用"><br>弱引用可以解决循环引用的问题。弱引用是<em>non-owning</em>的关系。为了保持对象至少有一个引用而不被释放，不能把所有引用都设置成弱引用。因此，Cocoa建立了一个惯例，“parent”对象对“children”对象持有强引用，而children对象弱引用parent对象。如上图表示的一样。</p><p>当向弱引用的对象发送消息时一定要消息。如果向已经释放的兑现发送消息时会引起崩溃。这里特别注意的是：通知中心。当向NotificationCenter注册观察者时，通知中心会持有观察者的弱引用，如果观察者释放时没有主动从通知中心移除自己，通知中心会在之后向被释放掉的观察者发送消息，这时候会引起崩溃。（文档中还提到了delegate，但是在ARC下我们使用weak来修饰，就不会引起问题了。）</p><h3 id="避免正在使用的对象被释放"><a href="#避免正在使用的对象被释放" class="headerlink" title="避免正在使用的对象被释放"></a>避免正在使用的对象被释放</h3><p>下面两种情况是需要特别注意的：</p><ol><li><p>当一个对象从集合中移除的时候：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">heisenObject = [array objectAtIndex:n];</span><br><span class="line">[array removeObjectAtIndex:n];</span><br><span class="line"><span class="comment">// heisenObject could now be invalid.</span></span><br></pre></td></tr></table></figure><blockquote><p>对象从集合中移除的时候，会收到<code>release</code>消息（而不是<code>autorelease</code>）。如果集合是对象的唯一持有者，这个对象会被立即释放。</p></blockquote></li><li><p>“parent object”释放</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> parent = &lt;<span class="meta">#create a parent object#&gt;;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">heisenObject = [parent child] ;</span><br><span class="line">[parent release]; <span class="comment">// Or, for example: self.parent = nil;</span></span><br><span class="line"><span class="comment">// heisenObject could now be invalid.</span></span><br></pre></td></tr></table></figure><blockquote><p>一个对象是由另一个对象生成的，之后直接或者间接的释放了父对象。如果这个释放导致了父对象的销毁，并且父对象是子对象的唯一持有者，那么子对象也会同时被销毁。</p></blockquote></li></ol><p>要想避免这些情况，我们可以<code>retain heisenObject</code>。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">heisenObject &#x3D; [[array objectAtIndex:n] retain];</span><br><span class="line">[array removeObjectAtIndex:n];</span><br><span class="line">&#x2F;&#x2F; Use heisenObject...</span><br><span class="line">[heisenObject release];</span><br></pre></td></tr></table></figure><h3 id="不要使用dealloc管理稀缺资源"><a href="#不要使用dealloc管理稀缺资源" class="headerlink" title="不要使用dealloc管理稀缺资源"></a>不要使用dealloc管理稀缺资源</h3><p>不要在<code>dealloc</code>方法中管理文件描述符、网络连接、缓存或者缓冲区等稀有资源。特别是，类中的<code>dealloc</code>方法不是你认为会调用的时候就会调用。<code>dealloc</code>的调用可能会由于bug或者应用“tear-down”造成延迟或者不调用。</p><p>相反地，如果你有一个类的实例来管理稀缺资源，你应该把你的应用设计成当资源不在需要的时候调用“clean up”方法来清理资源，之后释放实例，<code>dealloc</code>会紧接着调用，这样的话，即使<code>dealloc</code>没有调用也不会引起其他问题。</p><p>如果在<code>dealloc</code>中管理稀缺资源可能会引起几个问题：</p><ol><li>对象图拆卸的顺序依赖性<br> 对象图的拆卸链是没有固定顺序的。</li><li>不回收稀缺资源<br> 内存泄露是应该被解决的bug，但是他们不会立即致命。如果稀缺资源没有按照预先设计的正常释放，可能会引起更严重的问题。比如，如果应用程序的文件描述符耗尽了，用户可能将无法保存数据。</li><li>在错误的线程上执行清理逻辑<br> 如果一个对象在意外时间自动释放，它将在它碰巧所在的任何线程的自动释放池块中被释放。对于只能从一个线程触及的资源，这中情况是非常严重的问题。</li></ol><h3 id="集合拥有它们包含的对象"><a href="#集合拥有它们包含的对象" class="headerlink" title="集合拥有它们包含的对象"></a>集合拥有它们包含的对象</h3><p>当把一个对象放到集合中（例如array，dictionary，set），集合会持有这个对象。当对象从集合中移除或者集合本身被释放的时候，集合会放弃所有权。因此，如果你想要创建一个“numbers”的数组时，可以这样做：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableArray</span> *array = &lt;#Get a <span class="keyword">mutable</span> array#&gt;;</span><br><span class="line"><span class="built_in">NSUInteger</span> i;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">NSNumber</span> *convenienceNumber = [<span class="built_in">NSNumber</span> numberWithInteger:i];</span><br><span class="line">    [array addObject:convenienceNumber];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做，你没有调用<code>alloc</code>，因此不需要调用<code>release</code>。这里也不需要“retain”这些新的numbers，因为数组会这样做。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NSMutableArray *array &#x3D; &lt;#Get a mutable array#&gt;;</span><br><span class="line">NSUInteger i;</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">for (i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">    NSNumber *allocedNumber &#x3D; [[NSNumber alloc] initWithInteger:i];</span><br><span class="line">    [array addObject:allocedNumber];</span><br><span class="line">    [allocedNumber release];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式需要在<code>for</code>循环内<code>[allocedNumber release]</code>来匹配<code>alloc</code>，否则的话<code>allocedNumber</code>对象的引用计数就无法匹配了。</p><h3 id="所有权策略是使用引用计数来实现的"><a href="#所有权策略是使用引用计数来实现的" class="headerlink" title="所有权策略是使用引用计数来实现的"></a>所有权策略是使用引用计数来实现的</h3><ul><li>创建对象的时候，引用计数为1</li><li>向对象发送<code>retain</code>消息时，引用计数+1</li><li>向对象发送<code>release</code>消息时，引用计数-1。向对象发送<code>autorelease</code>消息时，对象的引用计数会在autorelease pool block的结尾处-1</li><li>引用计数减到0时，对象被销毁</li></ul><blockquote><p>不要使用<code>retainCount</code>来确定对象的引用计数，它是不准确的。应该使用引用计数规则结合代码来判断对象的引用计数。</p></blockquote><h2 id="使用Autorelease-Pool-Blocks"><a href="#使用Autorelease-Pool-Blocks" class="headerlink" title="使用Autorelease Pool Blocks"></a>使用Autorelease Pool Blocks</h2><p>自动释放池提供了一个可以用来<strong>废弃所有权而且又可以避免对象被立即销毁</strong>的机制。通常情况下，我们不需要创建自动释放吃，但是有些情况下必须使用或者如果使用了会提供一些益处。</p><h3 id="关于自动释放池"><a href="#关于自动释放池" class="headerlink" title="关于自动释放池"></a>关于自动释放池</h3><p>自动释放池是使用<code>@autoreleasepool</code>标记的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@autoreleasepool &#123;</span><br><span class="line">    &#x2F;&#x2F; Code that creates autorelease objects.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在自动释放池的结尾，所有收到<code>autorelease</code>消息的对象会被发送<code>release</code>消息。</p><p>和其他的block类似，自动释放池也能够嵌套</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">    <span class="comment">// . . .</span></span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="comment">// . . .</span></span><br><span class="line">    &#125;</span><br><span class="line">    . . .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套的自动释放池遵循就近原则。</p><p>Cocoa总是认为所有的代码会在自动释放池的范围内执行，否则的话自动释放的对象就无法被释放了，这样会导致内存泄露。如果有这种情况，Cocoa会打印出适当的错误信息。AppKit和UIKit框架中的事件循环迭代（例如鼠标点击或者用户触摸）都是在自动释放池内的。因此通常情况下，你不需要创建自动释放池。但是，下面的三种情况下，需要自己创建自动释放池：</p><ul><li>编写非UI framework程序时，例如命令行工具</li><li>在需要创建很多临时对象的循环中。在循环中使用自动释放池可以减少内存峰值</li><li>创建第二线程</li></ul><h3 id="使用自动释放池来降低内存峰值"><a href="#使用自动释放池来降低内存峰值" class="headerlink" title="使用自动释放池来降低内存峰值"></a>使用自动释放池来降低内存峰值</h3><p>有些代码需要创建一些自动释放的临时对象。这些对象直到自动释放池结尾处一直都在内存中。有时候这样做不会造成过多的内存提高；有时候这些对象过大就会造成过多的内存提升，而不得不尽快的释放这些临时对象。对于后一种情况，我们可以创建自己的自动释放池，在自动释放池的结尾这些占用内存的对象都会被销毁来节省内存。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *urls = &lt;# An array of file URLs #&gt;;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">NSURL</span> *url <span class="keyword">in</span> urls) &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSError</span> *error;</span><br><span class="line">        <span class="built_in">NSString</span> *fileContents = [<span class="built_in">NSString</span> stringWithContentsOfURL:url</span><br><span class="line">                                         encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;error];</span><br><span class="line">        <span class="comment">/* Process the string, creating and autoreleasing more objects. */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for</code>循环每次都处理一个文件。在自动释放池中<code>fileContents</code>对象是“autoreleased”，当到达自动释放池的结尾会自动释放。每次都会自动回收内存，就避免了内存占用过多的问题。</p><p>切记，自动释放的对象只要超出最近的自动释放池范围后就会被释放。也就是说，自动释放的对象被释放后就无法继续使用了，不要向这些对象发送消息，也不要把它们作为返回值。例如下面的这种情况：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">– (<span class="keyword">id</span>)findMatchingObject:(<span class="keyword">id</span>)anObject &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">id</span> match;</span><br><span class="line">    <span class="keyword">while</span> (match == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">/* Do a search that creates a lot of temporary objects. */</span></span><br><span class="line">            match = [<span class="keyword">self</span> expensiveSearchForObject:anObject];</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (match != <span class="literal">nil</span>) &#123;</span><br><span class="line">                [match <span class="keyword">retain</span>]; <span class="comment">/* Keep match around. */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> [match autorelease];   <span class="comment">/* Let match go and return it. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向自动释放池内的<code>match</code>对象发送<code>retain</code>消息来延长它的生命期，这样我们就可以把自动释放池内的对象作为返回值了，同时使用<code>autorelease</code>标记返回值是为了匹配<code>retain</code>的引用计数。</p><h3 id="自动释放池和线程"><a href="#自动释放池和线程" class="headerlink" title="自动释放池和线程"></a>自动释放池和线程</h3><p>每一个Cocoa的应用程序都有自己的自动释放池栈。如果你正在编写只包含Foundation框架的程序，或者自己创建了一个线程，你需要自己创建自动释放池。</p><p>如果应用或线程是长久保存的并且潜在的生成了很多自动释放的对象，这时应该定期的清空并且创建自动释放池（就像 Application Kit 在主线程中做的那样）；否则，对象的积累会增加内存的占用。如果，独立的线程并没有使用 Cocoa 的调用，你没有必要去创建一个自动释放池。</p><blockquote><p>如果使用了 POSIX 线程 APIS 而不是 NSThread 对象来创建线程，你不能使用 Cocoa，包括 NSautoreleasePool，除非 Cocoa 是在多线程模式下，Cocoa 进入了多线程模式只有在首次创建 NSThread 对象的时候，为了在第二个 POSIX 线程中使用 Cocoa ，你的应用必须首先至少创建了一个独立的 NSThread 对象，这个对象可以立即退出。你可以通过 NSThread 类方法 isMultiTheraded 来测试 Cocoa 是否在多线程模式下。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文内容是对&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html#//apple_ref/doc/uid/10000011-SW1&quot;&gt;Advanced Memory Management Programming Guide&lt;/a&gt;中重点内容的总结&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="http://www.iosprogrammer.tech/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 消息转发</title>
    <link href="http://www.iosprogrammer.tech/Objective-C-Message-Forward/"/>
    <id>http://www.iosprogrammer.tech/Objective-C-Message-Forward/</id>
    <published>2018-09-19T14:08:34.000Z</published>
    <updated>2021-01-26T03:40:37.791Z</updated>
    
    <content type="html"><![CDATA[<p>消息转发是Objc的核心概念，不论是工作过程中还是出去面试都不能避免要接触到这个概念，利用消息转发可以实现一些非常灵巧的功能。这篇文章由浅入深的讲解了消息转发的概念和实际应用的场景。</p><a id="more"></a><h4 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h4><p><strong>静态绑定</strong>：在编译期就能决定运行时所应调用的函数。代表语言：C、C++等<br><strong>动态绑定</strong>：所要调用的函数直到运行期才能确定。代表语言：OC、swift等<br><strong>消息传递</strong>：对象正常解读消息，传递过去<br><strong>消息转发</strong>：对象无法解读消息，之后进行消息转发</p><h4 id="消息处理流程"><a href="#消息处理流程" class="headerlink" title="消息处理流程"></a>消息处理流程</h4><ol><li>OC中调用方法<code>[a method]</code>后都是在执行<code>id objc_msgSend(id receiver, SEL op, ...) </code><blockquote><p><code>id objc_msgSend(id self, SEL op, ...) </code>是一个参数个数可变的函数，第一参数代表接受者，第二个参数代表选择子（OC函数名），之后的参数就是消息中传入的参数。</p></blockquote></li><li>当消息发送给对象时，消息函数跟随对象的isa指针找到类结构，并尝试在cache中搜索类中是否有对应的<code>SEL</code>，如果找到在cache中找到了则直接调用，这种情况下消息发送的耗时和函数调用相差无几</li><li>若cache中搜索失败，则到该类对应的<code>dispatch table</code>中搜寻方法，如果能找到这个跟选择子名称相同的方法，就跳转到其实现代码，往下执行。</li><li>该类的<code>dispatch table</code>中没有找到则继续沿着类层级向上寻找直到NSObject，找到后则进行方法调用并缓存。</li><li>如果最终还是找不到，那就进入消息转发的流程去进行处理。</li></ol><h4 id="消息转发流程"><a href="#消息转发流程" class="headerlink" title="消息转发流程"></a>消息转发流程</h4><p><img src="https://upload-images.jianshu.io/upload_images/424855-83a396fca4f6c206.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="msg_forward.png"></p><ol><li>调用resolveInstanceMethod：征询接受者（所属的类）是否可以添加方法以处理未知的选择子？(此过程称为动态方法解析）若有，转发结束。若没有，走第二步。</li><li>调用forwardingTargetForSelector：询问接受者是否有其他对象能处理此消息。若有，转发结束，一切如常。若没有，走第三步。</li><li>调用forwardInvocation：运行期系统将消息封装到NSInvocation对象中，再给接受者一次机会。</li><li>以上三步还不行，就抛出异常：unrecognized selector sent to instance xxxx</li></ol><h4 id="消息转发实例"><a href="#消息转发实例" class="headerlink" title="消息转发实例"></a>消息转发实例</h4><ol><li><p>在ViewController的头文件中声明一个方法，但是不要在ViewController.m中实现</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ViewController.h</span><br><span class="line"></span><br><span class="line">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">@interface ViewController : UIViewController</span><br><span class="line"></span><br><span class="line">- (void)testForwardMethod;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li><li><p>在AppDelegate中调用ViewController的<code>testForwardMethod </code>方法</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AppDelegate.m</span><br><span class="line"></span><br><span class="line">[[[ViewController alloc] init] testForwardMethod];</span><br></pre></td></tr></table></figure></li><li><p>这时候编译没有问题，但是运行会出现<code>-[ViewController testForwardMethod]: unrecognized selector sent to instance 0x10581bfe0</code></p></li><li><p>在ViewController.m中增加消息转发的方法</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ViewController.m</span><br><span class="line"></span><br><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;ViewController forwardingTargetForSelector&quot;);</span><br><span class="line">    return [[TestView alloc] init];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果有方法的实现，所有消息转发的过程都不会进行</span><br><span class="line">&#x2F;&#x2F;- (void)testForwardMethod</span><br><span class="line">&#x2F;&#x2F;&#123;</span><br><span class="line">&#x2F;&#x2F;    NSLog(@&quot;ViewController testForwardMethod&quot;);</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line"></span><br><span class="line">TestView.m</span><br><span class="line"></span><br><span class="line">- (void)testForwardMethod</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;TestView testForwardMethod&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>(id)forwardingTargetForSelector:(SEL)aSelector; 把aSelector转发给其他类对象。</li></ul></blockquote></li><li><p>在ViewController.m中增加两个消息转发的方法</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ViewController.m</span><br><span class="line">  </span><br><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;ViewController methodSignatureForSelector&quot;);</span><br><span class="line">    if (aSelector &#x3D;&#x3D; @selector(testForwardMethod))</span><br><span class="line">    &#123;</span><br><span class="line">        NSLog(@&quot;ViewController methodSignatureForSelector equal&quot;);</span><br><span class="line">        return [NSMethodSignature signatureWithObjCTypes:&quot;v@:&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">    return [super methodSignatureForSelector:aSelector];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-  (void)forwardInvocation:(NSInvocation *)anInvocation</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;ViewController forwardInvocation:&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li><code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>返回一NSMethodSignature对象，该对象包含给定选择器标识的方法的描述。在方法转发过程中如果需要使<code>NSInvocation </code>则就需要使用这个方法</li></ol></blockquote></li><li><p><code>signatureWithObjCTypes:</code>是用C字符串来创建<code>NSMethodSignature</code>对象，详细的描述以看<a href="https://blog.csdn.net/bigtiger1648/article/details/51084957">这篇文章</a></p></li></ol><h4 id="避开动态绑定"><a href="#避开动态绑定" class="headerlink" title="避开动态绑定"></a>避开动态绑定</h4><p>要想不使用OC的动态绑定，唯一的方案是获取到方法地址直接调用。 **这种方案仅适用于 对一个方法重复多次调用，并且对性能敏感 的情况 **</p><ol><li>通过<code>NSObject</code>的<code>methodForSelector</code>获取到方法实现的地址</li><li>使用指针直接调用方法<br>下面是以<code>setFilled:</code>方法为例 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void (*setter)(id, SEL, BOOL);</span><br><span class="line">int i;</span><br><span class="line"></span><br><span class="line">setter &#x3D; (void (*)(id, SEL, BOOL))[target</span><br><span class="line">    methodForSelector:@selector(setFilled:)];</span><br><span class="line">for ( i &#x3D; 0 ; i &lt; 1000 ; i++ )</span><br><span class="line">    setter(targetList[i], @selector(setFilled:), YES);</span><br></pre></td></tr></table></figure><blockquote><p><code>methodForSelector</code>不是Objective-C的特性，而是由Cocoa runtime system提供</p></blockquote></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;消息转发是Objc的核心概念，不论是工作过程中还是出去面试都不能避免要接触到这个概念，利用消息转发可以实现一些非常灵巧的功能。这篇文章由浅入深的讲解了消息转发的概念和实际应用的场景。&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="http://www.iosprogrammer.tech/tags/iOS/"/>
    
  </entry>
  
</feed>
